//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.ProblemType = {
  'UNDEFINED' : 0,
  'BINARY_CLASSIFICATION' : 1,
  'MULTICLASS_CLASSIFICATION' : 2,
  'REGRESSION' : 3,
  'CLUSTERING' : 4,
  'RECOMMENDATION' : 5
};
ttypes.ModelCompMetric = {
  'PROJECT' : 0,
  'EXPERIMENT_RUN' : 1,
  'MODEL_TYPE' : 2,
  'PROBLEM_TYPE' : 3,
  'RMSE' : 4,
  'EXPLAINED_VARIANCE' : 5,
  'R2' : 6
};
ttypes.ModelRankMetric = {
  'RMSE' : 0,
  'EXPLAINED_VARIANCE' : 1,
  'R2' : 2
};
Project = module.exports.Project = function(args) {
  this.id = -1;
  this.name = null;
  this.author = null;
  this.description = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.author !== undefined && args.author !== null) {
      this.author = args.author;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
Project.prototype = {};
Project.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.author = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Project.prototype.write = function(output) {
  output.writeStructBegin('Project');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.author !== null && this.author !== undefined) {
    output.writeFieldBegin('author', Thrift.Type.STRING, 3);
    output.writeString(this.author);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Experiment = module.exports.Experiment = function(args) {
  this.id = -1;
  this.projectId = null;
  this.name = null;
  this.description = null;
  this.isDefault = false;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.projectId !== undefined && args.projectId !== null) {
      this.projectId = args.projectId;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.isDefault !== undefined && args.isDefault !== null) {
      this.isDefault = args.isDefault;
    }
  }
};
Experiment.prototype = {};
Experiment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.projectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isDefault = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Experiment.prototype.write = function(output) {
  output.writeStructBegin('Experiment');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.projectId !== null && this.projectId !== undefined) {
    output.writeFieldBegin('projectId', Thrift.Type.I32, 2);
    output.writeI32(this.projectId);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 4);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.isDefault !== null && this.isDefault !== undefined) {
    output.writeFieldBegin('isDefault', Thrift.Type.BOOL, 5);
    output.writeBool(this.isDefault);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExperimentRun = module.exports.ExperimentRun = function(args) {
  this.id = -1;
  this.experimentId = null;
  this.description = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.experimentId !== undefined && args.experimentId !== null) {
      this.experimentId = args.experimentId;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
ExperimentRun.prototype = {};
ExperimentRun.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.experimentId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExperimentRun.prototype.write = function(output) {
  output.writeStructBegin('ExperimentRun');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.experimentId !== null && this.experimentId !== undefined) {
    output.writeFieldBegin('experimentId', Thrift.Type.I32, 2);
    output.writeI32(this.experimentId);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 3);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataFrameColumn = module.exports.DataFrameColumn = function(args) {
  this.name = null;
  this.type = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
DataFrameColumn.prototype = {};
DataFrameColumn.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataFrameColumn.prototype.write = function(output) {
  output.writeStructBegin('DataFrameColumn');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataFrame = module.exports.DataFrame = function(args) {
  this.id = -1;
  this.schema = null;
  this.numRows = null;
  this.tag = '';
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.schema !== undefined && args.schema !== null) {
      this.schema = Thrift.copyList(args.schema, [ttypes.DataFrameColumn]);
    }
    if (args.numRows !== undefined && args.numRows !== null) {
      this.numRows = args.numRows;
    }
    if (args.tag !== undefined && args.tag !== null) {
      this.tag = args.tag;
    }
  }
};
DataFrame.prototype = {};
DataFrame.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.schema = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.DataFrameColumn();
          elem6.read(input);
          this.schema.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataFrame.prototype.write = function(output) {
  output.writeStructBegin('DataFrame');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.schema.length);
    for (var iter7 in this.schema)
    {
      if (this.schema.hasOwnProperty(iter7))
      {
        iter7 = this.schema[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numRows !== null && this.numRows !== undefined) {
    output.writeFieldBegin('numRows', Thrift.Type.I32, 3);
    output.writeI32(this.numRows);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 4);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HyperParameter = module.exports.HyperParameter = function(args) {
  this.name = null;
  this.value = null;
  this.type = null;
  this.min = null;
  this.max = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.min !== undefined && args.min !== null) {
      this.min = args.min;
    }
    if (args.max !== undefined && args.max !== null) {
      this.max = args.max;
    }
  }
};
HyperParameter.prototype = {};
HyperParameter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.min = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.max = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HyperParameter.prototype.write = function(output) {
  output.writeStructBegin('HyperParameter');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.min !== null && this.min !== undefined) {
    output.writeFieldBegin('min', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.min);
    output.writeFieldEnd();
  }
  if (this.max !== null && this.max !== undefined) {
    output.writeFieldBegin('max', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.max);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProjectEvent = module.exports.ProjectEvent = function(args) {
  this.project = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.Project(args.project);
    }
  }
};
ProjectEvent.prototype = {};
ProjectEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.Project();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectEvent.prototype.write = function(output) {
  output.writeStructBegin('ProjectEvent');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProjectEventResponse = module.exports.ProjectEventResponse = function(args) {
  this.projectId = null;
  if (args) {
    if (args.projectId !== undefined && args.projectId !== null) {
      this.projectId = args.projectId;
    }
  }
};
ProjectEventResponse.prototype = {};
ProjectEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.projectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectEventResponse.prototype.write = function(output) {
  output.writeStructBegin('ProjectEventResponse');
  if (this.projectId !== null && this.projectId !== undefined) {
    output.writeFieldBegin('projectId', Thrift.Type.I32, 1);
    output.writeI32(this.projectId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExperimentEvent = module.exports.ExperimentEvent = function(args) {
  this.experiment = null;
  if (args) {
    if (args.experiment !== undefined && args.experiment !== null) {
      this.experiment = new ttypes.Experiment(args.experiment);
    }
  }
};
ExperimentEvent.prototype = {};
ExperimentEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.experiment = new ttypes.Experiment();
        this.experiment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExperimentEvent.prototype.write = function(output) {
  output.writeStructBegin('ExperimentEvent');
  if (this.experiment !== null && this.experiment !== undefined) {
    output.writeFieldBegin('experiment', Thrift.Type.STRUCT, 1);
    this.experiment.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExperimentEventResponse = module.exports.ExperimentEventResponse = function(args) {
  this.experimentId = null;
  if (args) {
    if (args.experimentId !== undefined && args.experimentId !== null) {
      this.experimentId = args.experimentId;
    }
  }
};
ExperimentEventResponse.prototype = {};
ExperimentEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.experimentId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExperimentEventResponse.prototype.write = function(output) {
  output.writeStructBegin('ExperimentEventResponse');
  if (this.experimentId !== null && this.experimentId !== undefined) {
    output.writeFieldBegin('experimentId', Thrift.Type.I32, 1);
    output.writeI32(this.experimentId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExperimentRunEvent = module.exports.ExperimentRunEvent = function(args) {
  this.experimentRun = null;
  if (args) {
    if (args.experimentRun !== undefined && args.experimentRun !== null) {
      this.experimentRun = new ttypes.ExperimentRun(args.experimentRun);
    }
  }
};
ExperimentRunEvent.prototype = {};
ExperimentRunEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.experimentRun = new ttypes.ExperimentRun();
        this.experimentRun.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExperimentRunEvent.prototype.write = function(output) {
  output.writeStructBegin('ExperimentRunEvent');
  if (this.experimentRun !== null && this.experimentRun !== undefined) {
    output.writeFieldBegin('experimentRun', Thrift.Type.STRUCT, 1);
    this.experimentRun.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExperimentRunEventResponse = module.exports.ExperimentRunEventResponse = function(args) {
  this.experimentRunId = null;
  if (args) {
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
  }
};
ExperimentRunEventResponse.prototype = {};
ExperimentRunEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExperimentRunEventResponse.prototype.write = function(output) {
  output.writeStructBegin('ExperimentRunEventResponse');
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 1);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TransformerSpec = module.exports.TransformerSpec = function(args) {
  this.id = -1;
  this.transformerType = null;
  this.features = null;
  this.hyperparameters = null;
  this.tag = '';
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.transformerType !== undefined && args.transformerType !== null) {
      this.transformerType = args.transformerType;
    }
    if (args.features !== undefined && args.features !== null) {
      this.features = Thrift.copyList(args.features, [null]);
    }
    if (args.hyperparameters !== undefined && args.hyperparameters !== null) {
      this.hyperparameters = Thrift.copyList(args.hyperparameters, [ttypes.HyperParameter]);
    }
    if (args.tag !== undefined && args.tag !== null) {
      this.tag = args.tag;
    }
  }
};
TransformerSpec.prototype = {};
TransformerSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.transformerType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.features = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.features.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.hyperparameters = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = new ttypes.HyperParameter();
          elem21.read(input);
          this.hyperparameters.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransformerSpec.prototype.write = function(output) {
  output.writeStructBegin('TransformerSpec');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.transformerType !== null && this.transformerType !== undefined) {
    output.writeFieldBegin('transformerType', Thrift.Type.STRING, 2);
    output.writeString(this.transformerType);
    output.writeFieldEnd();
  }
  if (this.features !== null && this.features !== undefined) {
    output.writeFieldBegin('features', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.features.length);
    for (var iter22 in this.features)
    {
      if (this.features.hasOwnProperty(iter22))
      {
        iter22 = this.features[iter22];
        output.writeString(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.hyperparameters !== null && this.hyperparameters !== undefined) {
    output.writeFieldBegin('hyperparameters', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.hyperparameters.length);
    for (var iter23 in this.hyperparameters)
    {
      if (this.hyperparameters.hasOwnProperty(iter23))
      {
        iter23 = this.hyperparameters[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 5);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Transformer = module.exports.Transformer = function(args) {
  this.id = -1;
  this.weights = null;
  this.transformerType = null;
  this.tag = '';
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.weights !== undefined && args.weights !== null) {
      this.weights = Thrift.copyList(args.weights, [null]);
    }
    if (args.transformerType !== undefined && args.transformerType !== null) {
      this.transformerType = args.transformerType;
    }
    if (args.tag !== undefined && args.tag !== null) {
      this.tag = args.tag;
    }
  }
};
Transformer.prototype = {};
Transformer.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.weights = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readDouble();
          this.weights.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.transformerType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tag = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Transformer.prototype.write = function(output) {
  output.writeStructBegin('Transformer');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.weights !== null && this.weights !== undefined) {
    output.writeFieldBegin('weights', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.DOUBLE, this.weights.length);
    for (var iter31 in this.weights)
    {
      if (this.weights.hasOwnProperty(iter31))
      {
        iter31 = this.weights[iter31];
        output.writeDouble(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.transformerType !== null && this.transformerType !== undefined) {
    output.writeFieldBegin('transformerType', Thrift.Type.STRING, 3);
    output.writeString(this.transformerType);
    output.writeFieldEnd();
  }
  if (this.tag !== null && this.tag !== undefined) {
    output.writeFieldBegin('tag', Thrift.Type.STRING, 4);
    output.writeString(this.tag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelResponse = module.exports.ModelResponse = function(args) {
  this.id = null;
  this.experimentRunId = null;
  this.experimentId = null;
  this.projectId = null;
  this.trainingDataFrame = null;
  this.specification = null;
  this.problemType = null;
  this.featureColumns = null;
  this.labelColumns = null;
  this.predictionColumns = null;
  this.metrics = null;
  this.annotations = null;
  this.sha = null;
  this.filepath = null;
  this.linearModelData = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
    if (args.experimentId !== undefined && args.experimentId !== null) {
      this.experimentId = args.experimentId;
    }
    if (args.projectId !== undefined && args.projectId !== null) {
      this.projectId = args.projectId;
    }
    if (args.trainingDataFrame !== undefined && args.trainingDataFrame !== null) {
      this.trainingDataFrame = new ttypes.DataFrame(args.trainingDataFrame);
    }
    if (args.specification !== undefined && args.specification !== null) {
      this.specification = new ttypes.TransformerSpec(args.specification);
    }
    if (args.problemType !== undefined && args.problemType !== null) {
      this.problemType = args.problemType;
    }
    if (args.featureColumns !== undefined && args.featureColumns !== null) {
      this.featureColumns = Thrift.copyList(args.featureColumns, [null]);
    }
    if (args.labelColumns !== undefined && args.labelColumns !== null) {
      this.labelColumns = Thrift.copyList(args.labelColumns, [null]);
    }
    if (args.predictionColumns !== undefined && args.predictionColumns !== null) {
      this.predictionColumns = Thrift.copyList(args.predictionColumns, [null]);
    }
    if (args.metrics !== undefined && args.metrics !== null) {
      this.metrics = Thrift.copyMap(args.metrics, [Thrift.copyMap, null]);
    }
    if (args.annotations !== undefined && args.annotations !== null) {
      this.annotations = Thrift.copyList(args.annotations, [null]);
    }
    if (args.sha !== undefined && args.sha !== null) {
      this.sha = args.sha;
    }
    if (args.filepath !== undefined && args.filepath !== null) {
      this.filepath = args.filepath;
    }
    if (args.linearModelData !== undefined && args.linearModelData !== null) {
      this.linearModelData = new ttypes.LinearModel(args.linearModelData);
    }
  }
};
ModelResponse.prototype = {};
ModelResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.experimentId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.projectId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.trainingDataFrame = new ttypes.DataFrame();
        this.trainingDataFrame.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.specification = new ttypes.TransformerSpec();
        this.specification.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.problemType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.featureColumns = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readString();
          this.featureColumns.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.labelColumns = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = input.readString();
          this.labelColumns.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size46 = 0;
        var _rtmp350;
        this.predictionColumns = [];
        var _etype49 = 0;
        _rtmp350 = input.readListBegin();
        _etype49 = _rtmp350.etype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          var elem52 = null;
          elem52 = input.readString();
          this.predictionColumns.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.MAP) {
        var _size53 = 0;
        var _rtmp357;
        this.metrics = {};
        var _ktype54 = 0;
        var _vtype55 = 0;
        _rtmp357 = input.readMapBegin();
        _ktype54 = _rtmp357.ktype;
        _vtype55 = _rtmp357.vtype;
        _size53 = _rtmp357.size;
        for (var _i58 = 0; _i58 < _size53; ++_i58)
        {
          var key59 = null;
          var val60 = null;
          key59 = input.readString();
          var _size61 = 0;
          var _rtmp365;
          val60 = {};
          var _ktype62 = 0;
          var _vtype63 = 0;
          _rtmp365 = input.readMapBegin();
          _ktype62 = _rtmp365.ktype;
          _vtype63 = _rtmp365.vtype;
          _size61 = _rtmp365.size;
          for (var _i66 = 0; _i66 < _size61; ++_i66)
          {
            var key67 = null;
            var val68 = null;
            key67 = input.readI32();
            val68 = input.readDouble();
            val60[key67] = val68;
          }
          input.readMapEnd();
          this.metrics[key59] = val60;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.LIST) {
        var _size69 = 0;
        var _rtmp373;
        this.annotations = [];
        var _etype72 = 0;
        _rtmp373 = input.readListBegin();
        _etype72 = _rtmp373.etype;
        _size69 = _rtmp373.size;
        for (var _i74 = 0; _i74 < _size69; ++_i74)
        {
          var elem75 = null;
          elem75 = input.readString();
          this.annotations.push(elem75);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.sha = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.filepath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRUCT) {
        this.linearModelData = new ttypes.LinearModel();
        this.linearModelData.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelResponse.prototype.write = function(output) {
  output.writeStructBegin('ModelResponse');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 2);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  if (this.experimentId !== null && this.experimentId !== undefined) {
    output.writeFieldBegin('experimentId', Thrift.Type.I32, 3);
    output.writeI32(this.experimentId);
    output.writeFieldEnd();
  }
  if (this.projectId !== null && this.projectId !== undefined) {
    output.writeFieldBegin('projectId', Thrift.Type.I32, 4);
    output.writeI32(this.projectId);
    output.writeFieldEnd();
  }
  if (this.trainingDataFrame !== null && this.trainingDataFrame !== undefined) {
    output.writeFieldBegin('trainingDataFrame', Thrift.Type.STRUCT, 5);
    this.trainingDataFrame.write(output);
    output.writeFieldEnd();
  }
  if (this.specification !== null && this.specification !== undefined) {
    output.writeFieldBegin('specification', Thrift.Type.STRUCT, 6);
    this.specification.write(output);
    output.writeFieldEnd();
  }
  if (this.problemType !== null && this.problemType !== undefined) {
    output.writeFieldBegin('problemType', Thrift.Type.I32, 7);
    output.writeI32(this.problemType);
    output.writeFieldEnd();
  }
  if (this.featureColumns !== null && this.featureColumns !== undefined) {
    output.writeFieldBegin('featureColumns', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.featureColumns.length);
    for (var iter76 in this.featureColumns)
    {
      if (this.featureColumns.hasOwnProperty(iter76))
      {
        iter76 = this.featureColumns[iter76];
        output.writeString(iter76);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.labelColumns !== null && this.labelColumns !== undefined) {
    output.writeFieldBegin('labelColumns', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRING, this.labelColumns.length);
    for (var iter77 in this.labelColumns)
    {
      if (this.labelColumns.hasOwnProperty(iter77))
      {
        iter77 = this.labelColumns[iter77];
        output.writeString(iter77);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.predictionColumns !== null && this.predictionColumns !== undefined) {
    output.writeFieldBegin('predictionColumns', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.predictionColumns.length);
    for (var iter78 in this.predictionColumns)
    {
      if (this.predictionColumns.hasOwnProperty(iter78))
      {
        iter78 = this.predictionColumns[iter78];
        output.writeString(iter78);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.metrics !== null && this.metrics !== undefined) {
    output.writeFieldBegin('metrics', Thrift.Type.MAP, 11);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.metrics));
    for (var kiter79 in this.metrics)
    {
      if (this.metrics.hasOwnProperty(kiter79))
      {
        var viter80 = this.metrics[kiter79];
        output.writeString(kiter79);
        output.writeMapBegin(Thrift.Type.I32, Thrift.Type.DOUBLE, Thrift.objectLength(viter80));
        for (var kiter81 in viter80)
        {
          if (viter80.hasOwnProperty(kiter81))
          {
            var viter82 = viter80[kiter81];
            output.writeI32(kiter81);
            output.writeDouble(viter82);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.annotations !== null && this.annotations !== undefined) {
    output.writeFieldBegin('annotations', Thrift.Type.LIST, 12);
    output.writeListBegin(Thrift.Type.STRING, this.annotations.length);
    for (var iter83 in this.annotations)
    {
      if (this.annotations.hasOwnProperty(iter83))
      {
        iter83 = this.annotations[iter83];
        output.writeString(iter83);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sha !== null && this.sha !== undefined) {
    output.writeFieldBegin('sha', Thrift.Type.STRING, 13);
    output.writeString(this.sha);
    output.writeFieldEnd();
  }
  if (this.filepath !== null && this.filepath !== undefined) {
    output.writeFieldBegin('filepath', Thrift.Type.STRING, 14);
    output.writeString(this.filepath);
    output.writeFieldEnd();
  }
  if (this.linearModelData !== null && this.linearModelData !== undefined) {
    output.writeFieldBegin('linearModelData', Thrift.Type.STRUCT, 15);
    this.linearModelData.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FitEvent = module.exports.FitEvent = function(args) {
  this.df = null;
  this.spec = null;
  this.model = null;
  this.featureColumns = null;
  this.predictionColumns = null;
  this.labelColumns = null;
  this.experimentRunId = null;
  this.problemType = 0;
  if (args) {
    if (args.df !== undefined && args.df !== null) {
      this.df = new ttypes.DataFrame(args.df);
    }
    if (args.spec !== undefined && args.spec !== null) {
      this.spec = new ttypes.TransformerSpec(args.spec);
    }
    if (args.model !== undefined && args.model !== null) {
      this.model = new ttypes.Transformer(args.model);
    }
    if (args.featureColumns !== undefined && args.featureColumns !== null) {
      this.featureColumns = Thrift.copyList(args.featureColumns, [null]);
    }
    if (args.predictionColumns !== undefined && args.predictionColumns !== null) {
      this.predictionColumns = Thrift.copyList(args.predictionColumns, [null]);
    }
    if (args.labelColumns !== undefined && args.labelColumns !== null) {
      this.labelColumns = Thrift.copyList(args.labelColumns, [null]);
    }
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
    if (args.problemType !== undefined && args.problemType !== null) {
      this.problemType = args.problemType;
    }
  }
};
FitEvent.prototype = {};
FitEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.df = new ttypes.DataFrame();
        this.df.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new ttypes.TransformerSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.model = new ttypes.Transformer();
        this.model.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.featureColumns = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = input.readString();
          this.featureColumns.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size91 = 0;
        var _rtmp395;
        this.predictionColumns = [];
        var _etype94 = 0;
        _rtmp395 = input.readListBegin();
        _etype94 = _rtmp395.etype;
        _size91 = _rtmp395.size;
        for (var _i96 = 0; _i96 < _size91; ++_i96)
        {
          var elem97 = null;
          elem97 = input.readString();
          this.predictionColumns.push(elem97);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size98 = 0;
        var _rtmp3102;
        this.labelColumns = [];
        var _etype101 = 0;
        _rtmp3102 = input.readListBegin();
        _etype101 = _rtmp3102.etype;
        _size98 = _rtmp3102.size;
        for (var _i103 = 0; _i103 < _size98; ++_i103)
        {
          var elem104 = null;
          elem104 = input.readString();
          this.labelColumns.push(elem104);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.problemType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FitEvent.prototype.write = function(output) {
  output.writeStructBegin('FitEvent');
  if (this.df !== null && this.df !== undefined) {
    output.writeFieldBegin('df', Thrift.Type.STRUCT, 1);
    this.df.write(output);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRUCT, 3);
    this.model.write(output);
    output.writeFieldEnd();
  }
  if (this.featureColumns !== null && this.featureColumns !== undefined) {
    output.writeFieldBegin('featureColumns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.featureColumns.length);
    for (var iter105 in this.featureColumns)
    {
      if (this.featureColumns.hasOwnProperty(iter105))
      {
        iter105 = this.featureColumns[iter105];
        output.writeString(iter105);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.predictionColumns !== null && this.predictionColumns !== undefined) {
    output.writeFieldBegin('predictionColumns', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.predictionColumns.length);
    for (var iter106 in this.predictionColumns)
    {
      if (this.predictionColumns.hasOwnProperty(iter106))
      {
        iter106 = this.predictionColumns[iter106];
        output.writeString(iter106);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.labelColumns !== null && this.labelColumns !== undefined) {
    output.writeFieldBegin('labelColumns', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.labelColumns.length);
    for (var iter107 in this.labelColumns)
    {
      if (this.labelColumns.hasOwnProperty(iter107))
      {
        iter107 = this.labelColumns[iter107];
        output.writeString(iter107);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 7);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  if (this.problemType !== null && this.problemType !== undefined) {
    output.writeFieldBegin('problemType', Thrift.Type.I32, 8);
    output.writeI32(this.problemType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LinearModelTerm = module.exports.LinearModelTerm = function(args) {
  this.coefficient = null;
  this.tStat = null;
  this.stdErr = null;
  this.pValue = null;
  if (args) {
    if (args.coefficient !== undefined && args.coefficient !== null) {
      this.coefficient = args.coefficient;
    }
    if (args.tStat !== undefined && args.tStat !== null) {
      this.tStat = args.tStat;
    }
    if (args.stdErr !== undefined && args.stdErr !== null) {
      this.stdErr = args.stdErr;
    }
    if (args.pValue !== undefined && args.pValue !== null) {
      this.pValue = args.pValue;
    }
  }
};
LinearModelTerm.prototype = {};
LinearModelTerm.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.coefficient = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.tStat = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.stdErr = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.pValue = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinearModelTerm.prototype.write = function(output) {
  output.writeStructBegin('LinearModelTerm');
  if (this.coefficient !== null && this.coefficient !== undefined) {
    output.writeFieldBegin('coefficient', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.coefficient);
    output.writeFieldEnd();
  }
  if (this.tStat !== null && this.tStat !== undefined) {
    output.writeFieldBegin('tStat', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.tStat);
    output.writeFieldEnd();
  }
  if (this.stdErr !== null && this.stdErr !== undefined) {
    output.writeFieldBegin('stdErr', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.stdErr);
    output.writeFieldEnd();
  }
  if (this.pValue !== null && this.pValue !== undefined) {
    output.writeFieldBegin('pValue', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.pValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LinearModel = module.exports.LinearModel = function(args) {
  this.interceptTerm = null;
  this.featureTerms = null;
  this.objectiveHistory = null;
  this.rmse = null;
  this.explainedVariance = null;
  this.r2 = null;
  if (args) {
    if (args.interceptTerm !== undefined && args.interceptTerm !== null) {
      this.interceptTerm = new ttypes.LinearModelTerm(args.interceptTerm);
    }
    if (args.featureTerms !== undefined && args.featureTerms !== null) {
      this.featureTerms = Thrift.copyList(args.featureTerms, [ttypes.LinearModelTerm]);
    }
    if (args.objectiveHistory !== undefined && args.objectiveHistory !== null) {
      this.objectiveHistory = Thrift.copyList(args.objectiveHistory, [null]);
    }
    if (args.rmse !== undefined && args.rmse !== null) {
      this.rmse = args.rmse;
    }
    if (args.explainedVariance !== undefined && args.explainedVariance !== null) {
      this.explainedVariance = args.explainedVariance;
    }
    if (args.r2 !== undefined && args.r2 !== null) {
      this.r2 = args.r2;
    }
  }
};
LinearModel.prototype = {};
LinearModel.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.interceptTerm = new ttypes.LinearModelTerm();
        this.interceptTerm.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size108 = 0;
        var _rtmp3112;
        this.featureTerms = [];
        var _etype111 = 0;
        _rtmp3112 = input.readListBegin();
        _etype111 = _rtmp3112.etype;
        _size108 = _rtmp3112.size;
        for (var _i113 = 0; _i113 < _size108; ++_i113)
        {
          var elem114 = null;
          elem114 = new ttypes.LinearModelTerm();
          elem114.read(input);
          this.featureTerms.push(elem114);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size115 = 0;
        var _rtmp3119;
        this.objectiveHistory = [];
        var _etype118 = 0;
        _rtmp3119 = input.readListBegin();
        _etype118 = _rtmp3119.etype;
        _size115 = _rtmp3119.size;
        for (var _i120 = 0; _i120 < _size115; ++_i120)
        {
          var elem121 = null;
          elem121 = input.readDouble();
          this.objectiveHistory.push(elem121);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rmse = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.explainedVariance = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.r2 = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LinearModel.prototype.write = function(output) {
  output.writeStructBegin('LinearModel');
  if (this.interceptTerm !== null && this.interceptTerm !== undefined) {
    output.writeFieldBegin('interceptTerm', Thrift.Type.STRUCT, 1);
    this.interceptTerm.write(output);
    output.writeFieldEnd();
  }
  if (this.featureTerms !== null && this.featureTerms !== undefined) {
    output.writeFieldBegin('featureTerms', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.featureTerms.length);
    for (var iter122 in this.featureTerms)
    {
      if (this.featureTerms.hasOwnProperty(iter122))
      {
        iter122 = this.featureTerms[iter122];
        iter122.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.objectiveHistory !== null && this.objectiveHistory !== undefined) {
    output.writeFieldBegin('objectiveHistory', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.DOUBLE, this.objectiveHistory.length);
    for (var iter123 in this.objectiveHistory)
    {
      if (this.objectiveHistory.hasOwnProperty(iter123))
      {
        iter123 = this.objectiveHistory[iter123];
        output.writeDouble(iter123);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rmse !== null && this.rmse !== undefined) {
    output.writeFieldBegin('rmse', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.rmse);
    output.writeFieldEnd();
  }
  if (this.explainedVariance !== null && this.explainedVariance !== undefined) {
    output.writeFieldBegin('explainedVariance', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.explainedVariance);
    output.writeFieldEnd();
  }
  if (this.r2 !== null && this.r2 !== undefined) {
    output.writeFieldBegin('r2', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.r2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FitEventResponse = module.exports.FitEventResponse = function(args) {
  this.dfId = null;
  this.specId = null;
  this.modelId = null;
  this.eventId = null;
  this.fitEventId = null;
  if (args) {
    if (args.dfId !== undefined && args.dfId !== null) {
      this.dfId = args.dfId;
    }
    if (args.specId !== undefined && args.specId !== null) {
      this.specId = args.specId;
    }
    if (args.modelId !== undefined && args.modelId !== null) {
      this.modelId = args.modelId;
    }
    if (args.eventId !== undefined && args.eventId !== null) {
      this.eventId = args.eventId;
    }
    if (args.fitEventId !== undefined && args.fitEventId !== null) {
      this.fitEventId = args.fitEventId;
    }
  }
};
FitEventResponse.prototype = {};
FitEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.dfId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.specId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.modelId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.eventId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.fitEventId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FitEventResponse.prototype.write = function(output) {
  output.writeStructBegin('FitEventResponse');
  if (this.dfId !== null && this.dfId !== undefined) {
    output.writeFieldBegin('dfId', Thrift.Type.I32, 1);
    output.writeI32(this.dfId);
    output.writeFieldEnd();
  }
  if (this.specId !== null && this.specId !== undefined) {
    output.writeFieldBegin('specId', Thrift.Type.I32, 2);
    output.writeI32(this.specId);
    output.writeFieldEnd();
  }
  if (this.modelId !== null && this.modelId !== undefined) {
    output.writeFieldBegin('modelId', Thrift.Type.I32, 3);
    output.writeI32(this.modelId);
    output.writeFieldEnd();
  }
  if (this.eventId !== null && this.eventId !== undefined) {
    output.writeFieldBegin('eventId', Thrift.Type.I32, 4);
    output.writeI32(this.eventId);
    output.writeFieldEnd();
  }
  if (this.fitEventId !== null && this.fitEventId !== undefined) {
    output.writeFieldBegin('fitEventId', Thrift.Type.I32, 5);
    output.writeI32(this.fitEventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricEvent = module.exports.MetricEvent = function(args) {
  this.df = null;
  this.model = null;
  this.metricType = null;
  this.metricValue = null;
  this.labelCol = null;
  this.predictionCol = null;
  this.experimentRunId = null;
  if (args) {
    if (args.df !== undefined && args.df !== null) {
      this.df = new ttypes.DataFrame(args.df);
    }
    if (args.model !== undefined && args.model !== null) {
      this.model = new ttypes.Transformer(args.model);
    }
    if (args.metricType !== undefined && args.metricType !== null) {
      this.metricType = args.metricType;
    }
    if (args.metricValue !== undefined && args.metricValue !== null) {
      this.metricValue = args.metricValue;
    }
    if (args.labelCol !== undefined && args.labelCol !== null) {
      this.labelCol = args.labelCol;
    }
    if (args.predictionCol !== undefined && args.predictionCol !== null) {
      this.predictionCol = args.predictionCol;
    }
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
  }
};
MetricEvent.prototype = {};
MetricEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.df = new ttypes.DataFrame();
        this.df.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.model = new ttypes.Transformer();
        this.model.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.metricType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.metricValue = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.labelCol = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.predictionCol = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricEvent.prototype.write = function(output) {
  output.writeStructBegin('MetricEvent');
  if (this.df !== null && this.df !== undefined) {
    output.writeFieldBegin('df', Thrift.Type.STRUCT, 1);
    this.df.write(output);
    output.writeFieldEnd();
  }
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRUCT, 2);
    this.model.write(output);
    output.writeFieldEnd();
  }
  if (this.metricType !== null && this.metricType !== undefined) {
    output.writeFieldBegin('metricType', Thrift.Type.STRING, 3);
    output.writeString(this.metricType);
    output.writeFieldEnd();
  }
  if (this.metricValue !== null && this.metricValue !== undefined) {
    output.writeFieldBegin('metricValue', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.metricValue);
    output.writeFieldEnd();
  }
  if (this.labelCol !== null && this.labelCol !== undefined) {
    output.writeFieldBegin('labelCol', Thrift.Type.STRING, 5);
    output.writeString(this.labelCol);
    output.writeFieldEnd();
  }
  if (this.predictionCol !== null && this.predictionCol !== undefined) {
    output.writeFieldBegin('predictionCol', Thrift.Type.STRING, 6);
    output.writeString(this.predictionCol);
    output.writeFieldEnd();
  }
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 7);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MetricEventResponse = module.exports.MetricEventResponse = function(args) {
  this.modelId = null;
  this.dfId = null;
  this.eventId = null;
  this.metricEventId = null;
  if (args) {
    if (args.modelId !== undefined && args.modelId !== null) {
      this.modelId = args.modelId;
    }
    if (args.dfId !== undefined && args.dfId !== null) {
      this.dfId = args.dfId;
    }
    if (args.eventId !== undefined && args.eventId !== null) {
      this.eventId = args.eventId;
    }
    if (args.metricEventId !== undefined && args.metricEventId !== null) {
      this.metricEventId = args.metricEventId;
    }
  }
};
MetricEventResponse.prototype = {};
MetricEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.modelId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dfId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.eventId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.metricEventId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MetricEventResponse.prototype.write = function(output) {
  output.writeStructBegin('MetricEventResponse');
  if (this.modelId !== null && this.modelId !== undefined) {
    output.writeFieldBegin('modelId', Thrift.Type.I32, 1);
    output.writeI32(this.modelId);
    output.writeFieldEnd();
  }
  if (this.dfId !== null && this.dfId !== undefined) {
    output.writeFieldBegin('dfId', Thrift.Type.I32, 2);
    output.writeI32(this.dfId);
    output.writeFieldEnd();
  }
  if (this.eventId !== null && this.eventId !== undefined) {
    output.writeFieldBegin('eventId', Thrift.Type.I32, 3);
    output.writeI32(this.eventId);
    output.writeFieldEnd();
  }
  if (this.metricEventId !== null && this.metricEventId !== undefined) {
    output.writeFieldBegin('metricEventId', Thrift.Type.I32, 4);
    output.writeI32(this.metricEventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TransformEvent = module.exports.TransformEvent = function(args) {
  this.oldDataFrame = null;
  this.newDataFrame = null;
  this.transformer = null;
  this.inputColumns = null;
  this.outputColumns = null;
  this.experimentRunId = null;
  if (args) {
    if (args.oldDataFrame !== undefined && args.oldDataFrame !== null) {
      this.oldDataFrame = new ttypes.DataFrame(args.oldDataFrame);
    }
    if (args.newDataFrame !== undefined && args.newDataFrame !== null) {
      this.newDataFrame = new ttypes.DataFrame(args.newDataFrame);
    }
    if (args.transformer !== undefined && args.transformer !== null) {
      this.transformer = new ttypes.Transformer(args.transformer);
    }
    if (args.inputColumns !== undefined && args.inputColumns !== null) {
      this.inputColumns = Thrift.copyList(args.inputColumns, [null]);
    }
    if (args.outputColumns !== undefined && args.outputColumns !== null) {
      this.outputColumns = Thrift.copyList(args.outputColumns, [null]);
    }
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
  }
};
TransformEvent.prototype = {};
TransformEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.oldDataFrame = new ttypes.DataFrame();
        this.oldDataFrame.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.newDataFrame = new ttypes.DataFrame();
        this.newDataFrame.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.transformer = new ttypes.Transformer();
        this.transformer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size124 = 0;
        var _rtmp3128;
        this.inputColumns = [];
        var _etype127 = 0;
        _rtmp3128 = input.readListBegin();
        _etype127 = _rtmp3128.etype;
        _size124 = _rtmp3128.size;
        for (var _i129 = 0; _i129 < _size124; ++_i129)
        {
          var elem130 = null;
          elem130 = input.readString();
          this.inputColumns.push(elem130);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size131 = 0;
        var _rtmp3135;
        this.outputColumns = [];
        var _etype134 = 0;
        _rtmp3135 = input.readListBegin();
        _etype134 = _rtmp3135.etype;
        _size131 = _rtmp3135.size;
        for (var _i136 = 0; _i136 < _size131; ++_i136)
        {
          var elem137 = null;
          elem137 = input.readString();
          this.outputColumns.push(elem137);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransformEvent.prototype.write = function(output) {
  output.writeStructBegin('TransformEvent');
  if (this.oldDataFrame !== null && this.oldDataFrame !== undefined) {
    output.writeFieldBegin('oldDataFrame', Thrift.Type.STRUCT, 1);
    this.oldDataFrame.write(output);
    output.writeFieldEnd();
  }
  if (this.newDataFrame !== null && this.newDataFrame !== undefined) {
    output.writeFieldBegin('newDataFrame', Thrift.Type.STRUCT, 2);
    this.newDataFrame.write(output);
    output.writeFieldEnd();
  }
  if (this.transformer !== null && this.transformer !== undefined) {
    output.writeFieldBegin('transformer', Thrift.Type.STRUCT, 3);
    this.transformer.write(output);
    output.writeFieldEnd();
  }
  if (this.inputColumns !== null && this.inputColumns !== undefined) {
    output.writeFieldBegin('inputColumns', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.inputColumns.length);
    for (var iter138 in this.inputColumns)
    {
      if (this.inputColumns.hasOwnProperty(iter138))
      {
        iter138 = this.inputColumns[iter138];
        output.writeString(iter138);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.outputColumns !== null && this.outputColumns !== undefined) {
    output.writeFieldBegin('outputColumns', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.outputColumns.length);
    for (var iter139 in this.outputColumns)
    {
      if (this.outputColumns.hasOwnProperty(iter139))
      {
        iter139 = this.outputColumns[iter139];
        output.writeString(iter139);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 6);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TransformEventResponse = module.exports.TransformEventResponse = function(args) {
  this.oldDataFrameId = null;
  this.newDataFrameId = null;
  this.transformerId = null;
  this.eventId = null;
  this.filepath = null;
  if (args) {
    if (args.oldDataFrameId !== undefined && args.oldDataFrameId !== null) {
      this.oldDataFrameId = args.oldDataFrameId;
    }
    if (args.newDataFrameId !== undefined && args.newDataFrameId !== null) {
      this.newDataFrameId = args.newDataFrameId;
    }
    if (args.transformerId !== undefined && args.transformerId !== null) {
      this.transformerId = args.transformerId;
    }
    if (args.eventId !== undefined && args.eventId !== null) {
      this.eventId = args.eventId;
    }
    if (args.filepath !== undefined && args.filepath !== null) {
      this.filepath = args.filepath;
    }
  }
};
TransformEventResponse.prototype = {};
TransformEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.oldDataFrameId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.newDataFrameId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.transformerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.eventId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.filepath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransformEventResponse.prototype.write = function(output) {
  output.writeStructBegin('TransformEventResponse');
  if (this.oldDataFrameId !== null && this.oldDataFrameId !== undefined) {
    output.writeFieldBegin('oldDataFrameId', Thrift.Type.I32, 1);
    output.writeI32(this.oldDataFrameId);
    output.writeFieldEnd();
  }
  if (this.newDataFrameId !== null && this.newDataFrameId !== undefined) {
    output.writeFieldBegin('newDataFrameId', Thrift.Type.I32, 2);
    output.writeI32(this.newDataFrameId);
    output.writeFieldEnd();
  }
  if (this.transformerId !== null && this.transformerId !== undefined) {
    output.writeFieldBegin('transformerId', Thrift.Type.I32, 3);
    output.writeI32(this.transformerId);
    output.writeFieldEnd();
  }
  if (this.eventId !== null && this.eventId !== undefined) {
    output.writeFieldBegin('eventId', Thrift.Type.I32, 4);
    output.writeI32(this.eventId);
    output.writeFieldEnd();
  }
  if (this.filepath !== null && this.filepath !== undefined) {
    output.writeFieldBegin('filepath', Thrift.Type.STRING, 5);
    output.writeString(this.filepath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RandomSplitEvent = module.exports.RandomSplitEvent = function(args) {
  this.oldDataFrame = null;
  this.weights = null;
  this.seed = null;
  this.splitDataFrames = null;
  this.experimentRunId = null;
  if (args) {
    if (args.oldDataFrame !== undefined && args.oldDataFrame !== null) {
      this.oldDataFrame = new ttypes.DataFrame(args.oldDataFrame);
    }
    if (args.weights !== undefined && args.weights !== null) {
      this.weights = Thrift.copyList(args.weights, [null]);
    }
    if (args.seed !== undefined && args.seed !== null) {
      this.seed = args.seed;
    }
    if (args.splitDataFrames !== undefined && args.splitDataFrames !== null) {
      this.splitDataFrames = Thrift.copyList(args.splitDataFrames, [ttypes.DataFrame]);
    }
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
  }
};
RandomSplitEvent.prototype = {};
RandomSplitEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.oldDataFrame = new ttypes.DataFrame();
        this.oldDataFrame.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size140 = 0;
        var _rtmp3144;
        this.weights = [];
        var _etype143 = 0;
        _rtmp3144 = input.readListBegin();
        _etype143 = _rtmp3144.etype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          var elem146 = null;
          elem146 = input.readDouble();
          this.weights.push(elem146);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.seed = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size147 = 0;
        var _rtmp3151;
        this.splitDataFrames = [];
        var _etype150 = 0;
        _rtmp3151 = input.readListBegin();
        _etype150 = _rtmp3151.etype;
        _size147 = _rtmp3151.size;
        for (var _i152 = 0; _i152 < _size147; ++_i152)
        {
          var elem153 = null;
          elem153 = new ttypes.DataFrame();
          elem153.read(input);
          this.splitDataFrames.push(elem153);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RandomSplitEvent.prototype.write = function(output) {
  output.writeStructBegin('RandomSplitEvent');
  if (this.oldDataFrame !== null && this.oldDataFrame !== undefined) {
    output.writeFieldBegin('oldDataFrame', Thrift.Type.STRUCT, 1);
    this.oldDataFrame.write(output);
    output.writeFieldEnd();
  }
  if (this.weights !== null && this.weights !== undefined) {
    output.writeFieldBegin('weights', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.DOUBLE, this.weights.length);
    for (var iter154 in this.weights)
    {
      if (this.weights.hasOwnProperty(iter154))
      {
        iter154 = this.weights[iter154];
        output.writeDouble(iter154);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.seed !== null && this.seed !== undefined) {
    output.writeFieldBegin('seed', Thrift.Type.I64, 3);
    output.writeI64(this.seed);
    output.writeFieldEnd();
  }
  if (this.splitDataFrames !== null && this.splitDataFrames !== undefined) {
    output.writeFieldBegin('splitDataFrames', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.splitDataFrames.length);
    for (var iter155 in this.splitDataFrames)
    {
      if (this.splitDataFrames.hasOwnProperty(iter155))
      {
        iter155 = this.splitDataFrames[iter155];
        iter155.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 5);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RandomSplitEventResponse = module.exports.RandomSplitEventResponse = function(args) {
  this.oldDataFrameId = null;
  this.splitIds = null;
  this.splitEventId = null;
  if (args) {
    if (args.oldDataFrameId !== undefined && args.oldDataFrameId !== null) {
      this.oldDataFrameId = args.oldDataFrameId;
    }
    if (args.splitIds !== undefined && args.splitIds !== null) {
      this.splitIds = Thrift.copyList(args.splitIds, [null]);
    }
    if (args.splitEventId !== undefined && args.splitEventId !== null) {
      this.splitEventId = args.splitEventId;
    }
  }
};
RandomSplitEventResponse.prototype = {};
RandomSplitEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.oldDataFrameId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size156 = 0;
        var _rtmp3160;
        this.splitIds = [];
        var _etype159 = 0;
        _rtmp3160 = input.readListBegin();
        _etype159 = _rtmp3160.etype;
        _size156 = _rtmp3160.size;
        for (var _i161 = 0; _i161 < _size156; ++_i161)
        {
          var elem162 = null;
          elem162 = input.readI32();
          this.splitIds.push(elem162);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.splitEventId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RandomSplitEventResponse.prototype.write = function(output) {
  output.writeStructBegin('RandomSplitEventResponse');
  if (this.oldDataFrameId !== null && this.oldDataFrameId !== undefined) {
    output.writeFieldBegin('oldDataFrameId', Thrift.Type.I32, 1);
    output.writeI32(this.oldDataFrameId);
    output.writeFieldEnd();
  }
  if (this.splitIds !== null && this.splitIds !== undefined) {
    output.writeFieldBegin('splitIds', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.splitIds.length);
    for (var iter163 in this.splitIds)
    {
      if (this.splitIds.hasOwnProperty(iter163))
      {
        iter163 = this.splitIds[iter163];
        output.writeI32(iter163);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.splitEventId !== null && this.splitEventId !== undefined) {
    output.writeFieldBegin('splitEventId', Thrift.Type.I32, 3);
    output.writeI32(this.splitEventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CrossValidationFold = module.exports.CrossValidationFold = function(args) {
  this.model = null;
  this.validationDf = null;
  this.trainingDf = null;
  this.score = null;
  if (args) {
    if (args.model !== undefined && args.model !== null) {
      this.model = new ttypes.Transformer(args.model);
    }
    if (args.validationDf !== undefined && args.validationDf !== null) {
      this.validationDf = new ttypes.DataFrame(args.validationDf);
    }
    if (args.trainingDf !== undefined && args.trainingDf !== null) {
      this.trainingDf = new ttypes.DataFrame(args.trainingDf);
    }
    if (args.score !== undefined && args.score !== null) {
      this.score = args.score;
    }
  }
};
CrossValidationFold.prototype = {};
CrossValidationFold.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.model = new ttypes.Transformer();
        this.model.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.validationDf = new ttypes.DataFrame();
        this.validationDf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.trainingDf = new ttypes.DataFrame();
        this.trainingDf.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.score = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CrossValidationFold.prototype.write = function(output) {
  output.writeStructBegin('CrossValidationFold');
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRUCT, 1);
    this.model.write(output);
    output.writeFieldEnd();
  }
  if (this.validationDf !== null && this.validationDf !== undefined) {
    output.writeFieldBegin('validationDf', Thrift.Type.STRUCT, 2);
    this.validationDf.write(output);
    output.writeFieldEnd();
  }
  if (this.trainingDf !== null && this.trainingDf !== undefined) {
    output.writeFieldBegin('trainingDf', Thrift.Type.STRUCT, 3);
    this.trainingDf.write(output);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.score);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CrossValidationFoldResponse = module.exports.CrossValidationFoldResponse = function(args) {
  this.modelId = null;
  this.validationId = null;
  this.trainingId = null;
  if (args) {
    if (args.modelId !== undefined && args.modelId !== null) {
      this.modelId = args.modelId;
    }
    if (args.validationId !== undefined && args.validationId !== null) {
      this.validationId = args.validationId;
    }
    if (args.trainingId !== undefined && args.trainingId !== null) {
      this.trainingId = args.trainingId;
    }
  }
};
CrossValidationFoldResponse.prototype = {};
CrossValidationFoldResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.modelId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.validationId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.trainingId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CrossValidationFoldResponse.prototype.write = function(output) {
  output.writeStructBegin('CrossValidationFoldResponse');
  if (this.modelId !== null && this.modelId !== undefined) {
    output.writeFieldBegin('modelId', Thrift.Type.I32, 1);
    output.writeI32(this.modelId);
    output.writeFieldEnd();
  }
  if (this.validationId !== null && this.validationId !== undefined) {
    output.writeFieldBegin('validationId', Thrift.Type.I32, 2);
    output.writeI32(this.validationId);
    output.writeFieldEnd();
  }
  if (this.trainingId !== null && this.trainingId !== undefined) {
    output.writeFieldBegin('trainingId', Thrift.Type.I32, 3);
    output.writeI32(this.trainingId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CrossValidationEvent = module.exports.CrossValidationEvent = function(args) {
  this.df = null;
  this.spec = null;
  this.seed = null;
  this.evaluator = null;
  this.labelColumns = null;
  this.predictionColumns = null;
  this.featureColumns = null;
  this.folds = null;
  this.experimentRunId = null;
  this.problemType = 0;
  if (args) {
    if (args.df !== undefined && args.df !== null) {
      this.df = new ttypes.DataFrame(args.df);
    }
    if (args.spec !== undefined && args.spec !== null) {
      this.spec = new ttypes.TransformerSpec(args.spec);
    }
    if (args.seed !== undefined && args.seed !== null) {
      this.seed = args.seed;
    }
    if (args.evaluator !== undefined && args.evaluator !== null) {
      this.evaluator = args.evaluator;
    }
    if (args.labelColumns !== undefined && args.labelColumns !== null) {
      this.labelColumns = Thrift.copyList(args.labelColumns, [null]);
    }
    if (args.predictionColumns !== undefined && args.predictionColumns !== null) {
      this.predictionColumns = Thrift.copyList(args.predictionColumns, [null]);
    }
    if (args.featureColumns !== undefined && args.featureColumns !== null) {
      this.featureColumns = Thrift.copyList(args.featureColumns, [null]);
    }
    if (args.folds !== undefined && args.folds !== null) {
      this.folds = Thrift.copyList(args.folds, [ttypes.CrossValidationFold]);
    }
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
    if (args.problemType !== undefined && args.problemType !== null) {
      this.problemType = args.problemType;
    }
  }
};
CrossValidationEvent.prototype = {};
CrossValidationEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.df = new ttypes.DataFrame();
        this.df.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new ttypes.TransformerSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.seed = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.evaluator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size164 = 0;
        var _rtmp3168;
        this.labelColumns = [];
        var _etype167 = 0;
        _rtmp3168 = input.readListBegin();
        _etype167 = _rtmp3168.etype;
        _size164 = _rtmp3168.size;
        for (var _i169 = 0; _i169 < _size164; ++_i169)
        {
          var elem170 = null;
          elem170 = input.readString();
          this.labelColumns.push(elem170);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size171 = 0;
        var _rtmp3175;
        this.predictionColumns = [];
        var _etype174 = 0;
        _rtmp3175 = input.readListBegin();
        _etype174 = _rtmp3175.etype;
        _size171 = _rtmp3175.size;
        for (var _i176 = 0; _i176 < _size171; ++_i176)
        {
          var elem177 = null;
          elem177 = input.readString();
          this.predictionColumns.push(elem177);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size178 = 0;
        var _rtmp3182;
        this.featureColumns = [];
        var _etype181 = 0;
        _rtmp3182 = input.readListBegin();
        _etype181 = _rtmp3182.etype;
        _size178 = _rtmp3182.size;
        for (var _i183 = 0; _i183 < _size178; ++_i183)
        {
          var elem184 = null;
          elem184 = input.readString();
          this.featureColumns.push(elem184);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size185 = 0;
        var _rtmp3189;
        this.folds = [];
        var _etype188 = 0;
        _rtmp3189 = input.readListBegin();
        _etype188 = _rtmp3189.etype;
        _size185 = _rtmp3189.size;
        for (var _i190 = 0; _i190 < _size185; ++_i190)
        {
          var elem191 = null;
          elem191 = new ttypes.CrossValidationFold();
          elem191.read(input);
          this.folds.push(elem191);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.problemType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CrossValidationEvent.prototype.write = function(output) {
  output.writeStructBegin('CrossValidationEvent');
  if (this.df !== null && this.df !== undefined) {
    output.writeFieldBegin('df', Thrift.Type.STRUCT, 1);
    this.df.write(output);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 2);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  if (this.seed !== null && this.seed !== undefined) {
    output.writeFieldBegin('seed', Thrift.Type.I64, 3);
    output.writeI64(this.seed);
    output.writeFieldEnd();
  }
  if (this.evaluator !== null && this.evaluator !== undefined) {
    output.writeFieldBegin('evaluator', Thrift.Type.STRING, 4);
    output.writeString(this.evaluator);
    output.writeFieldEnd();
  }
  if (this.labelColumns !== null && this.labelColumns !== undefined) {
    output.writeFieldBegin('labelColumns', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.labelColumns.length);
    for (var iter192 in this.labelColumns)
    {
      if (this.labelColumns.hasOwnProperty(iter192))
      {
        iter192 = this.labelColumns[iter192];
        output.writeString(iter192);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.predictionColumns !== null && this.predictionColumns !== undefined) {
    output.writeFieldBegin('predictionColumns', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.predictionColumns.length);
    for (var iter193 in this.predictionColumns)
    {
      if (this.predictionColumns.hasOwnProperty(iter193))
      {
        iter193 = this.predictionColumns[iter193];
        output.writeString(iter193);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.featureColumns !== null && this.featureColumns !== undefined) {
    output.writeFieldBegin('featureColumns', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRING, this.featureColumns.length);
    for (var iter194 in this.featureColumns)
    {
      if (this.featureColumns.hasOwnProperty(iter194))
      {
        iter194 = this.featureColumns[iter194];
        output.writeString(iter194);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.folds !== null && this.folds !== undefined) {
    output.writeFieldBegin('folds', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.folds.length);
    for (var iter195 in this.folds)
    {
      if (this.folds.hasOwnProperty(iter195))
      {
        iter195 = this.folds[iter195];
        iter195.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 9);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  if (this.problemType !== null && this.problemType !== undefined) {
    output.writeFieldBegin('problemType', Thrift.Type.I32, 10);
    output.writeI32(this.problemType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CrossValidationEventResponse = module.exports.CrossValidationEventResponse = function(args) {
  this.dfId = null;
  this.specId = null;
  this.eventId = null;
  this.foldResponses = null;
  this.crossValidationEventId = null;
  if (args) {
    if (args.dfId !== undefined && args.dfId !== null) {
      this.dfId = args.dfId;
    }
    if (args.specId !== undefined && args.specId !== null) {
      this.specId = args.specId;
    }
    if (args.eventId !== undefined && args.eventId !== null) {
      this.eventId = args.eventId;
    }
    if (args.foldResponses !== undefined && args.foldResponses !== null) {
      this.foldResponses = Thrift.copyList(args.foldResponses, [ttypes.CrossValidationFoldResponse]);
    }
    if (args.crossValidationEventId !== undefined && args.crossValidationEventId !== null) {
      this.crossValidationEventId = args.crossValidationEventId;
    }
  }
};
CrossValidationEventResponse.prototype = {};
CrossValidationEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.dfId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.specId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.eventId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size196 = 0;
        var _rtmp3200;
        this.foldResponses = [];
        var _etype199 = 0;
        _rtmp3200 = input.readListBegin();
        _etype199 = _rtmp3200.etype;
        _size196 = _rtmp3200.size;
        for (var _i201 = 0; _i201 < _size196; ++_i201)
        {
          var elem202 = null;
          elem202 = new ttypes.CrossValidationFoldResponse();
          elem202.read(input);
          this.foldResponses.push(elem202);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.crossValidationEventId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CrossValidationEventResponse.prototype.write = function(output) {
  output.writeStructBegin('CrossValidationEventResponse');
  if (this.dfId !== null && this.dfId !== undefined) {
    output.writeFieldBegin('dfId', Thrift.Type.I32, 1);
    output.writeI32(this.dfId);
    output.writeFieldEnd();
  }
  if (this.specId !== null && this.specId !== undefined) {
    output.writeFieldBegin('specId', Thrift.Type.I32, 2);
    output.writeI32(this.specId);
    output.writeFieldEnd();
  }
  if (this.eventId !== null && this.eventId !== undefined) {
    output.writeFieldBegin('eventId', Thrift.Type.I32, 3);
    output.writeI32(this.eventId);
    output.writeFieldEnd();
  }
  if (this.foldResponses !== null && this.foldResponses !== undefined) {
    output.writeFieldBegin('foldResponses', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.foldResponses.length);
    for (var iter203 in this.foldResponses)
    {
      if (this.foldResponses.hasOwnProperty(iter203))
      {
        iter203 = this.foldResponses[iter203];
        iter203.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.crossValidationEventId !== null && this.crossValidationEventId !== undefined) {
    output.writeFieldBegin('crossValidationEventId', Thrift.Type.I32, 5);
    output.writeI32(this.crossValidationEventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GridSearchCrossValidationEvent = module.exports.GridSearchCrossValidationEvent = function(args) {
  this.numFolds = null;
  this.bestFit = null;
  this.crossValidations = null;
  this.experimentRunId = null;
  this.problemType = 0;
  if (args) {
    if (args.numFolds !== undefined && args.numFolds !== null) {
      this.numFolds = args.numFolds;
    }
    if (args.bestFit !== undefined && args.bestFit !== null) {
      this.bestFit = new ttypes.FitEvent(args.bestFit);
    }
    if (args.crossValidations !== undefined && args.crossValidations !== null) {
      this.crossValidations = Thrift.copyList(args.crossValidations, [ttypes.CrossValidationEvent]);
    }
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
    if (args.problemType !== undefined && args.problemType !== null) {
      this.problemType = args.problemType;
    }
  }
};
GridSearchCrossValidationEvent.prototype = {};
GridSearchCrossValidationEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.numFolds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.bestFit = new ttypes.FitEvent();
        this.bestFit.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size204 = 0;
        var _rtmp3208;
        this.crossValidations = [];
        var _etype207 = 0;
        _rtmp3208 = input.readListBegin();
        _etype207 = _rtmp3208.etype;
        _size204 = _rtmp3208.size;
        for (var _i209 = 0; _i209 < _size204; ++_i209)
        {
          var elem210 = null;
          elem210 = new ttypes.CrossValidationEvent();
          elem210.read(input);
          this.crossValidations.push(elem210);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.problemType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GridSearchCrossValidationEvent.prototype.write = function(output) {
  output.writeStructBegin('GridSearchCrossValidationEvent');
  if (this.numFolds !== null && this.numFolds !== undefined) {
    output.writeFieldBegin('numFolds', Thrift.Type.I32, 1);
    output.writeI32(this.numFolds);
    output.writeFieldEnd();
  }
  if (this.bestFit !== null && this.bestFit !== undefined) {
    output.writeFieldBegin('bestFit', Thrift.Type.STRUCT, 2);
    this.bestFit.write(output);
    output.writeFieldEnd();
  }
  if (this.crossValidations !== null && this.crossValidations !== undefined) {
    output.writeFieldBegin('crossValidations', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.crossValidations.length);
    for (var iter211 in this.crossValidations)
    {
      if (this.crossValidations.hasOwnProperty(iter211))
      {
        iter211 = this.crossValidations[iter211];
        iter211.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 4);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  if (this.problemType !== null && this.problemType !== undefined) {
    output.writeFieldBegin('problemType', Thrift.Type.I32, 5);
    output.writeI32(this.problemType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

GridSearchCrossValidationEventResponse = module.exports.GridSearchCrossValidationEventResponse = function(args) {
  this.gscveId = null;
  this.eventId = null;
  this.fitEventResponse = null;
  this.crossValidationEventResponses = null;
  if (args) {
    if (args.gscveId !== undefined && args.gscveId !== null) {
      this.gscveId = args.gscveId;
    }
    if (args.eventId !== undefined && args.eventId !== null) {
      this.eventId = args.eventId;
    }
    if (args.fitEventResponse !== undefined && args.fitEventResponse !== null) {
      this.fitEventResponse = new ttypes.FitEventResponse(args.fitEventResponse);
    }
    if (args.crossValidationEventResponses !== undefined && args.crossValidationEventResponses !== null) {
      this.crossValidationEventResponses = Thrift.copyList(args.crossValidationEventResponses, [ttypes.CrossValidationEventResponse]);
    }
  }
};
GridSearchCrossValidationEventResponse.prototype = {};
GridSearchCrossValidationEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.gscveId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.eventId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.fitEventResponse = new ttypes.FitEventResponse();
        this.fitEventResponse.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size212 = 0;
        var _rtmp3216;
        this.crossValidationEventResponses = [];
        var _etype215 = 0;
        _rtmp3216 = input.readListBegin();
        _etype215 = _rtmp3216.etype;
        _size212 = _rtmp3216.size;
        for (var _i217 = 0; _i217 < _size212; ++_i217)
        {
          var elem218 = null;
          elem218 = new ttypes.CrossValidationEventResponse();
          elem218.read(input);
          this.crossValidationEventResponses.push(elem218);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GridSearchCrossValidationEventResponse.prototype.write = function(output) {
  output.writeStructBegin('GridSearchCrossValidationEventResponse');
  if (this.gscveId !== null && this.gscveId !== undefined) {
    output.writeFieldBegin('gscveId', Thrift.Type.I32, 1);
    output.writeI32(this.gscveId);
    output.writeFieldEnd();
  }
  if (this.eventId !== null && this.eventId !== undefined) {
    output.writeFieldBegin('eventId', Thrift.Type.I32, 2);
    output.writeI32(this.eventId);
    output.writeFieldEnd();
  }
  if (this.fitEventResponse !== null && this.fitEventResponse !== undefined) {
    output.writeFieldBegin('fitEventResponse', Thrift.Type.STRUCT, 3);
    this.fitEventResponse.write(output);
    output.writeFieldEnd();
  }
  if (this.crossValidationEventResponses !== null && this.crossValidationEventResponses !== undefined) {
    output.writeFieldBegin('crossValidationEventResponses', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.crossValidationEventResponses.length);
    for (var iter219 in this.crossValidationEventResponses)
    {
      if (this.crossValidationEventResponses.hasOwnProperty(iter219))
      {
        iter219 = this.crossValidationEventResponses[iter219];
        iter219.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PipelineTransformStage = module.exports.PipelineTransformStage = function(args) {
  this.stageNumber = null;
  this.te = null;
  if (args) {
    if (args.stageNumber !== undefined && args.stageNumber !== null) {
      this.stageNumber = args.stageNumber;
    }
    if (args.te !== undefined && args.te !== null) {
      this.te = new ttypes.TransformEvent(args.te);
    }
  }
};
PipelineTransformStage.prototype = {};
PipelineTransformStage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.stageNumber = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TransformEvent();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PipelineTransformStage.prototype.write = function(output) {
  output.writeStructBegin('PipelineTransformStage');
  if (this.stageNumber !== null && this.stageNumber !== undefined) {
    output.writeFieldBegin('stageNumber', Thrift.Type.I32, 1);
    output.writeI32(this.stageNumber);
    output.writeFieldEnd();
  }
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 2);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PipelineFitStage = module.exports.PipelineFitStage = function(args) {
  this.stageNumber = null;
  this.fe = null;
  if (args) {
    if (args.stageNumber !== undefined && args.stageNumber !== null) {
      this.stageNumber = args.stageNumber;
    }
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = new ttypes.FitEvent(args.fe);
    }
  }
};
PipelineFitStage.prototype = {};
PipelineFitStage.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.stageNumber = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.FitEvent();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PipelineFitStage.prototype.write = function(output) {
  output.writeStructBegin('PipelineFitStage');
  if (this.stageNumber !== null && this.stageNumber !== undefined) {
    output.writeFieldBegin('stageNumber', Thrift.Type.I32, 1);
    output.writeI32(this.stageNumber);
    output.writeFieldEnd();
  }
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 2);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PipelineEvent = module.exports.PipelineEvent = function(args) {
  this.pipelineFit = null;
  this.transformStages = null;
  this.fitStages = null;
  this.experimentRunId = null;
  if (args) {
    if (args.pipelineFit !== undefined && args.pipelineFit !== null) {
      this.pipelineFit = new ttypes.FitEvent(args.pipelineFit);
    }
    if (args.transformStages !== undefined && args.transformStages !== null) {
      this.transformStages = Thrift.copyList(args.transformStages, [ttypes.PipelineTransformStage]);
    }
    if (args.fitStages !== undefined && args.fitStages !== null) {
      this.fitStages = Thrift.copyList(args.fitStages, [ttypes.PipelineFitStage]);
    }
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
  }
};
PipelineEvent.prototype = {};
PipelineEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pipelineFit = new ttypes.FitEvent();
        this.pipelineFit.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size220 = 0;
        var _rtmp3224;
        this.transformStages = [];
        var _etype223 = 0;
        _rtmp3224 = input.readListBegin();
        _etype223 = _rtmp3224.etype;
        _size220 = _rtmp3224.size;
        for (var _i225 = 0; _i225 < _size220; ++_i225)
        {
          var elem226 = null;
          elem226 = new ttypes.PipelineTransformStage();
          elem226.read(input);
          this.transformStages.push(elem226);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size227 = 0;
        var _rtmp3231;
        this.fitStages = [];
        var _etype230 = 0;
        _rtmp3231 = input.readListBegin();
        _etype230 = _rtmp3231.etype;
        _size227 = _rtmp3231.size;
        for (var _i232 = 0; _i232 < _size227; ++_i232)
        {
          var elem233 = null;
          elem233 = new ttypes.PipelineFitStage();
          elem233.read(input);
          this.fitStages.push(elem233);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PipelineEvent.prototype.write = function(output) {
  output.writeStructBegin('PipelineEvent');
  if (this.pipelineFit !== null && this.pipelineFit !== undefined) {
    output.writeFieldBegin('pipelineFit', Thrift.Type.STRUCT, 1);
    this.pipelineFit.write(output);
    output.writeFieldEnd();
  }
  if (this.transformStages !== null && this.transformStages !== undefined) {
    output.writeFieldBegin('transformStages', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.transformStages.length);
    for (var iter234 in this.transformStages)
    {
      if (this.transformStages.hasOwnProperty(iter234))
      {
        iter234 = this.transformStages[iter234];
        iter234.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fitStages !== null && this.fitStages !== undefined) {
    output.writeFieldBegin('fitStages', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.fitStages.length);
    for (var iter235 in this.fitStages)
    {
      if (this.fitStages.hasOwnProperty(iter235))
      {
        iter235 = this.fitStages[iter235];
        iter235.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 4);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PipelineEventResponse = module.exports.PipelineEventResponse = function(args) {
  this.pipelineFitResponse = null;
  this.transformStagesResponses = null;
  this.fitStagesResponses = null;
  if (args) {
    if (args.pipelineFitResponse !== undefined && args.pipelineFitResponse !== null) {
      this.pipelineFitResponse = new ttypes.FitEventResponse(args.pipelineFitResponse);
    }
    if (args.transformStagesResponses !== undefined && args.transformStagesResponses !== null) {
      this.transformStagesResponses = Thrift.copyList(args.transformStagesResponses, [ttypes.TransformEventResponse]);
    }
    if (args.fitStagesResponses !== undefined && args.fitStagesResponses !== null) {
      this.fitStagesResponses = Thrift.copyList(args.fitStagesResponses, [ttypes.FitEventResponse]);
    }
  }
};
PipelineEventResponse.prototype = {};
PipelineEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pipelineFitResponse = new ttypes.FitEventResponse();
        this.pipelineFitResponse.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size236 = 0;
        var _rtmp3240;
        this.transformStagesResponses = [];
        var _etype239 = 0;
        _rtmp3240 = input.readListBegin();
        _etype239 = _rtmp3240.etype;
        _size236 = _rtmp3240.size;
        for (var _i241 = 0; _i241 < _size236; ++_i241)
        {
          var elem242 = null;
          elem242 = new ttypes.TransformEventResponse();
          elem242.read(input);
          this.transformStagesResponses.push(elem242);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size243 = 0;
        var _rtmp3247;
        this.fitStagesResponses = [];
        var _etype246 = 0;
        _rtmp3247 = input.readListBegin();
        _etype246 = _rtmp3247.etype;
        _size243 = _rtmp3247.size;
        for (var _i248 = 0; _i248 < _size243; ++_i248)
        {
          var elem249 = null;
          elem249 = new ttypes.FitEventResponse();
          elem249.read(input);
          this.fitStagesResponses.push(elem249);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PipelineEventResponse.prototype.write = function(output) {
  output.writeStructBegin('PipelineEventResponse');
  if (this.pipelineFitResponse !== null && this.pipelineFitResponse !== undefined) {
    output.writeFieldBegin('pipelineFitResponse', Thrift.Type.STRUCT, 1);
    this.pipelineFitResponse.write(output);
    output.writeFieldEnd();
  }
  if (this.transformStagesResponses !== null && this.transformStagesResponses !== undefined) {
    output.writeFieldBegin('transformStagesResponses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.transformStagesResponses.length);
    for (var iter250 in this.transformStagesResponses)
    {
      if (this.transformStagesResponses.hasOwnProperty(iter250))
      {
        iter250 = this.transformStagesResponses[iter250];
        iter250.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fitStagesResponses !== null && this.fitStagesResponses !== undefined) {
    output.writeFieldBegin('fitStagesResponses', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.fitStagesResponses.length);
    for (var iter251 in this.fitStagesResponses)
    {
      if (this.fitStagesResponses.hasOwnProperty(iter251))
      {
        iter251 = this.fitStagesResponses[iter251];
        iter251.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotationFragment = module.exports.AnnotationFragment = function(args) {
  this.type = null;
  this.df = null;
  this.spec = null;
  this.transformer = null;
  this.message = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.df !== undefined && args.df !== null) {
      this.df = new ttypes.DataFrame(args.df);
    }
    if (args.spec !== undefined && args.spec !== null) {
      this.spec = new ttypes.TransformerSpec(args.spec);
    }
    if (args.transformer !== undefined && args.transformer !== null) {
      this.transformer = new ttypes.Transformer(args.transformer);
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
AnnotationFragment.prototype = {};
AnnotationFragment.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.df = new ttypes.DataFrame();
        this.df.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.spec = new ttypes.TransformerSpec();
        this.spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.transformer = new ttypes.Transformer();
        this.transformer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotationFragment.prototype.write = function(output) {
  output.writeStructBegin('AnnotationFragment');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.df !== null && this.df !== undefined) {
    output.writeFieldBegin('df', Thrift.Type.STRUCT, 2);
    this.df.write(output);
    output.writeFieldEnd();
  }
  if (this.spec !== null && this.spec !== undefined) {
    output.writeFieldBegin('spec', Thrift.Type.STRUCT, 3);
    this.spec.write(output);
    output.writeFieldEnd();
  }
  if (this.transformer !== null && this.transformer !== undefined) {
    output.writeFieldBegin('transformer', Thrift.Type.STRUCT, 4);
    this.transformer.write(output);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 5);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotationFragmentResponse = module.exports.AnnotationFragmentResponse = function(args) {
  this.type = null;
  this.id = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
AnnotationFragmentResponse.prototype = {};
AnnotationFragmentResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotationFragmentResponse.prototype.write = function(output) {
  output.writeStructBegin('AnnotationFragmentResponse');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 2);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotationEvent = module.exports.AnnotationEvent = function(args) {
  this.fragments = null;
  this.experimentRunId = null;
  if (args) {
    if (args.fragments !== undefined && args.fragments !== null) {
      this.fragments = Thrift.copyList(args.fragments, [ttypes.AnnotationFragment]);
    }
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
  }
};
AnnotationEvent.prototype = {};
AnnotationEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size252 = 0;
        var _rtmp3256;
        this.fragments = [];
        var _etype255 = 0;
        _rtmp3256 = input.readListBegin();
        _etype255 = _rtmp3256.etype;
        _size252 = _rtmp3256.size;
        for (var _i257 = 0; _i257 < _size252; ++_i257)
        {
          var elem258 = null;
          elem258 = new ttypes.AnnotationFragment();
          elem258.read(input);
          this.fragments.push(elem258);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotationEvent.prototype.write = function(output) {
  output.writeStructBegin('AnnotationEvent');
  if (this.fragments !== null && this.fragments !== undefined) {
    output.writeFieldBegin('fragments', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.fragments.length);
    for (var iter259 in this.fragments)
    {
      if (this.fragments.hasOwnProperty(iter259))
      {
        iter259 = this.fragments[iter259];
        iter259.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 2);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnnotationEventResponse = module.exports.AnnotationEventResponse = function(args) {
  this.annotationId = null;
  this.fragmentResponses = null;
  if (args) {
    if (args.annotationId !== undefined && args.annotationId !== null) {
      this.annotationId = args.annotationId;
    }
    if (args.fragmentResponses !== undefined && args.fragmentResponses !== null) {
      this.fragmentResponses = Thrift.copyList(args.fragmentResponses, [ttypes.AnnotationFragmentResponse]);
    }
  }
};
AnnotationEventResponse.prototype = {};
AnnotationEventResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.annotationId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size260 = 0;
        var _rtmp3264;
        this.fragmentResponses = [];
        var _etype263 = 0;
        _rtmp3264 = input.readListBegin();
        _etype263 = _rtmp3264.etype;
        _size260 = _rtmp3264.size;
        for (var _i265 = 0; _i265 < _size260; ++_i265)
        {
          var elem266 = null;
          elem266 = new ttypes.AnnotationFragmentResponse();
          elem266.read(input);
          this.fragmentResponses.push(elem266);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnnotationEventResponse.prototype.write = function(output) {
  output.writeStructBegin('AnnotationEventResponse');
  if (this.annotationId !== null && this.annotationId !== undefined) {
    output.writeFieldBegin('annotationId', Thrift.Type.I32, 1);
    output.writeI32(this.annotationId);
    output.writeFieldEnd();
  }
  if (this.fragmentResponses !== null && this.fragmentResponses !== undefined) {
    output.writeFieldBegin('fragmentResponses', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.fragmentResponses.length);
    for (var iter267 in this.fragmentResponses)
    {
      if (this.fragmentResponses.hasOwnProperty(iter267))
      {
        iter267 = this.fragmentResponses[iter267];
        iter267.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

DataFrameAncestry = module.exports.DataFrameAncestry = function(args) {
  this.ancestors = null;
  if (args) {
    if (args.ancestors !== undefined && args.ancestors !== null) {
      this.ancestors = Thrift.copyList(args.ancestors, [ttypes.DataFrame]);
    }
  }
};
DataFrameAncestry.prototype = {};
DataFrameAncestry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size268 = 0;
        var _rtmp3272;
        this.ancestors = [];
        var _etype271 = 0;
        _rtmp3272 = input.readListBegin();
        _etype271 = _rtmp3272.etype;
        _size268 = _rtmp3272.size;
        for (var _i273 = 0; _i273 < _size268; ++_i273)
        {
          var elem274 = null;
          elem274 = new ttypes.DataFrame();
          elem274.read(input);
          this.ancestors.push(elem274);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataFrameAncestry.prototype.write = function(output) {
  output.writeStructBegin('DataFrameAncestry');
  if (this.ancestors !== null && this.ancestors !== undefined) {
    output.writeFieldBegin('ancestors', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.ancestors.length);
    for (var iter275 in this.ancestors)
    {
      if (this.ancestors.hasOwnProperty(iter275))
      {
        iter275 = this.ancestors[iter275];
        iter275.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommonAncestor = module.exports.CommonAncestor = function(args) {
  this.ancestor = null;
  this.chainIndexModel1 = null;
  this.chainIndexModel2 = null;
  if (args) {
    if (args.ancestor !== undefined && args.ancestor !== null) {
      this.ancestor = new ttypes.DataFrame(args.ancestor);
    }
    if (args.chainIndexModel1 !== undefined && args.chainIndexModel1 !== null) {
      this.chainIndexModel1 = args.chainIndexModel1;
    }
    if (args.chainIndexModel2 !== undefined && args.chainIndexModel2 !== null) {
      this.chainIndexModel2 = args.chainIndexModel2;
    }
  }
};
CommonAncestor.prototype = {};
CommonAncestor.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ancestor = new ttypes.DataFrame();
        this.ancestor.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.chainIndexModel1 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.chainIndexModel2 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonAncestor.prototype.write = function(output) {
  output.writeStructBegin('CommonAncestor');
  if (this.ancestor !== null && this.ancestor !== undefined) {
    output.writeFieldBegin('ancestor', Thrift.Type.STRUCT, 1);
    this.ancestor.write(output);
    output.writeFieldEnd();
  }
  if (this.chainIndexModel1 !== null && this.chainIndexModel1 !== undefined) {
    output.writeFieldBegin('chainIndexModel1', Thrift.Type.I32, 2);
    output.writeI32(this.chainIndexModel1);
    output.writeFieldEnd();
  }
  if (this.chainIndexModel2 !== null && this.chainIndexModel2 !== undefined) {
    output.writeFieldBegin('chainIndexModel2', Thrift.Type.I32, 3);
    output.writeI32(this.chainIndexModel2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StringPair = module.exports.StringPair = function(args) {
  this.first = null;
  this.second = null;
  if (args) {
    if (args.first !== undefined && args.first !== null) {
      this.first = args.first;
    }
    if (args.second !== undefined && args.second !== null) {
      this.second = args.second;
    }
  }
};
StringPair.prototype = {};
StringPair.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.first = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.second = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StringPair.prototype.write = function(output) {
  output.writeStructBegin('StringPair');
  if (this.first !== null && this.first !== undefined) {
    output.writeFieldBegin('first', Thrift.Type.STRING, 1);
    output.writeString(this.first);
    output.writeFieldEnd();
  }
  if (this.second !== null && this.second !== undefined) {
    output.writeFieldBegin('second', Thrift.Type.STRING, 2);
    output.writeString(this.second);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CompareHyperParametersResponse = module.exports.CompareHyperParametersResponse = function(args) {
  this.model1OnlyHyperparams = null;
  this.model2OnlyHyperparams = null;
  this.sharedHyperparams = null;
  if (args) {
    if (args.model1OnlyHyperparams !== undefined && args.model1OnlyHyperparams !== null) {
      this.model1OnlyHyperparams = Thrift.copyMap(args.model1OnlyHyperparams, [null]);
    }
    if (args.model2OnlyHyperparams !== undefined && args.model2OnlyHyperparams !== null) {
      this.model2OnlyHyperparams = Thrift.copyMap(args.model2OnlyHyperparams, [null]);
    }
    if (args.sharedHyperparams !== undefined && args.sharedHyperparams !== null) {
      this.sharedHyperparams = Thrift.copyMap(args.sharedHyperparams, [ttypes.StringPair]);
    }
  }
};
CompareHyperParametersResponse.prototype = {};
CompareHyperParametersResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size276 = 0;
        var _rtmp3280;
        this.model1OnlyHyperparams = {};
        var _ktype277 = 0;
        var _vtype278 = 0;
        _rtmp3280 = input.readMapBegin();
        _ktype277 = _rtmp3280.ktype;
        _vtype278 = _rtmp3280.vtype;
        _size276 = _rtmp3280.size;
        for (var _i281 = 0; _i281 < _size276; ++_i281)
        {
          var key282 = null;
          var val283 = null;
          key282 = input.readString();
          val283 = input.readString();
          this.model1OnlyHyperparams[key282] = val283;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size284 = 0;
        var _rtmp3288;
        this.model2OnlyHyperparams = {};
        var _ktype285 = 0;
        var _vtype286 = 0;
        _rtmp3288 = input.readMapBegin();
        _ktype285 = _rtmp3288.ktype;
        _vtype286 = _rtmp3288.vtype;
        _size284 = _rtmp3288.size;
        for (var _i289 = 0; _i289 < _size284; ++_i289)
        {
          var key290 = null;
          var val291 = null;
          key290 = input.readString();
          val291 = input.readString();
          this.model2OnlyHyperparams[key290] = val291;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size292 = 0;
        var _rtmp3296;
        this.sharedHyperparams = {};
        var _ktype293 = 0;
        var _vtype294 = 0;
        _rtmp3296 = input.readMapBegin();
        _ktype293 = _rtmp3296.ktype;
        _vtype294 = _rtmp3296.vtype;
        _size292 = _rtmp3296.size;
        for (var _i297 = 0; _i297 < _size292; ++_i297)
        {
          var key298 = null;
          var val299 = null;
          key298 = input.readString();
          val299 = new ttypes.StringPair();
          val299.read(input);
          this.sharedHyperparams[key298] = val299;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompareHyperParametersResponse.prototype.write = function(output) {
  output.writeStructBegin('CompareHyperParametersResponse');
  if (this.model1OnlyHyperparams !== null && this.model1OnlyHyperparams !== undefined) {
    output.writeFieldBegin('model1OnlyHyperparams', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.model1OnlyHyperparams));
    for (var kiter300 in this.model1OnlyHyperparams)
    {
      if (this.model1OnlyHyperparams.hasOwnProperty(kiter300))
      {
        var viter301 = this.model1OnlyHyperparams[kiter300];
        output.writeString(kiter300);
        output.writeString(viter301);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.model2OnlyHyperparams !== null && this.model2OnlyHyperparams !== undefined) {
    output.writeFieldBegin('model2OnlyHyperparams', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.model2OnlyHyperparams));
    for (var kiter302 in this.model2OnlyHyperparams)
    {
      if (this.model2OnlyHyperparams.hasOwnProperty(kiter302))
      {
        var viter303 = this.model2OnlyHyperparams[kiter302];
        output.writeString(kiter302);
        output.writeString(viter303);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.sharedHyperparams !== null && this.sharedHyperparams !== undefined) {
    output.writeFieldBegin('sharedHyperparams', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.sharedHyperparams));
    for (var kiter304 in this.sharedHyperparams)
    {
      if (this.sharedHyperparams.hasOwnProperty(kiter304))
      {
        var viter305 = this.sharedHyperparams[kiter304];
        output.writeString(kiter304);
        viter305.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CompareFeaturesResponse = module.exports.CompareFeaturesResponse = function(args) {
  this.model1OnlyFeatures = null;
  this.model2OnlyFeatures = null;
  this.commonFeatures = null;
  if (args) {
    if (args.model1OnlyFeatures !== undefined && args.model1OnlyFeatures !== null) {
      this.model1OnlyFeatures = Thrift.copyList(args.model1OnlyFeatures, [null]);
    }
    if (args.model2OnlyFeatures !== undefined && args.model2OnlyFeatures !== null) {
      this.model2OnlyFeatures = Thrift.copyList(args.model2OnlyFeatures, [null]);
    }
    if (args.commonFeatures !== undefined && args.commonFeatures !== null) {
      this.commonFeatures = Thrift.copyList(args.commonFeatures, [null]);
    }
  }
};
CompareFeaturesResponse.prototype = {};
CompareFeaturesResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size306 = 0;
        var _rtmp3310;
        this.model1OnlyFeatures = [];
        var _etype309 = 0;
        _rtmp3310 = input.readListBegin();
        _etype309 = _rtmp3310.etype;
        _size306 = _rtmp3310.size;
        for (var _i311 = 0; _i311 < _size306; ++_i311)
        {
          var elem312 = null;
          elem312 = input.readString();
          this.model1OnlyFeatures.push(elem312);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size313 = 0;
        var _rtmp3317;
        this.model2OnlyFeatures = [];
        var _etype316 = 0;
        _rtmp3317 = input.readListBegin();
        _etype316 = _rtmp3317.etype;
        _size313 = _rtmp3317.size;
        for (var _i318 = 0; _i318 < _size313; ++_i318)
        {
          var elem319 = null;
          elem319 = input.readString();
          this.model2OnlyFeatures.push(elem319);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size320 = 0;
        var _rtmp3324;
        this.commonFeatures = [];
        var _etype323 = 0;
        _rtmp3324 = input.readListBegin();
        _etype323 = _rtmp3324.etype;
        _size320 = _rtmp3324.size;
        for (var _i325 = 0; _i325 < _size320; ++_i325)
        {
          var elem326 = null;
          elem326 = input.readString();
          this.commonFeatures.push(elem326);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompareFeaturesResponse.prototype.write = function(output) {
  output.writeStructBegin('CompareFeaturesResponse');
  if (this.model1OnlyFeatures !== null && this.model1OnlyFeatures !== undefined) {
    output.writeFieldBegin('model1OnlyFeatures', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.model1OnlyFeatures.length);
    for (var iter327 in this.model1OnlyFeatures)
    {
      if (this.model1OnlyFeatures.hasOwnProperty(iter327))
      {
        iter327 = this.model1OnlyFeatures[iter327];
        output.writeString(iter327);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.model2OnlyFeatures !== null && this.model2OnlyFeatures !== undefined) {
    output.writeFieldBegin('model2OnlyFeatures', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.model2OnlyFeatures.length);
    for (var iter328 in this.model2OnlyFeatures)
    {
      if (this.model2OnlyFeatures.hasOwnProperty(iter328))
      {
        iter328 = this.model2OnlyFeatures[iter328];
        output.writeString(iter328);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.commonFeatures !== null && this.commonFeatures !== undefined) {
    output.writeFieldBegin('commonFeatures', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.commonFeatures.length);
    for (var iter329 in this.commonFeatures)
    {
      if (this.commonFeatures.hasOwnProperty(iter329))
      {
        iter329 = this.commonFeatures[iter329];
        output.writeString(iter329);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

FeatureImportanceComparison = module.exports.FeatureImportanceComparison = function(args) {
  this.featureName = null;
  this.percentileRankInModel1 = null;
  this.percentileRankInModel2 = null;
  if (args) {
    if (args.featureName !== undefined && args.featureName !== null) {
      this.featureName = args.featureName;
    }
    if (args.percentileRankInModel1 !== undefined && args.percentileRankInModel1 !== null) {
      this.percentileRankInModel1 = args.percentileRankInModel1;
    }
    if (args.percentileRankInModel2 !== undefined && args.percentileRankInModel2 !== null) {
      this.percentileRankInModel2 = args.percentileRankInModel2;
    }
  }
};
FeatureImportanceComparison.prototype = {};
FeatureImportanceComparison.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.featureName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.percentileRankInModel1 = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.percentileRankInModel2 = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FeatureImportanceComparison.prototype.write = function(output) {
  output.writeStructBegin('FeatureImportanceComparison');
  if (this.featureName !== null && this.featureName !== undefined) {
    output.writeFieldBegin('featureName', Thrift.Type.STRING, 1);
    output.writeString(this.featureName);
    output.writeFieldEnd();
  }
  if (this.percentileRankInModel1 !== null && this.percentileRankInModel1 !== undefined) {
    output.writeFieldBegin('percentileRankInModel1', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.percentileRankInModel1);
    output.writeFieldEnd();
  }
  if (this.percentileRankInModel2 !== null && this.percentileRankInModel2 !== undefined) {
    output.writeFieldBegin('percentileRankInModel2', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.percentileRankInModel2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ConfidenceInterval = module.exports.ConfidenceInterval = function(args) {
  this.featureIndex = null;
  this.low = null;
  this.high = null;
  if (args) {
    if (args.featureIndex !== undefined && args.featureIndex !== null) {
      this.featureIndex = args.featureIndex;
    }
    if (args.low !== undefined && args.low !== null) {
      this.low = args.low;
    }
    if (args.high !== undefined && args.high !== null) {
      this.high = args.high;
    }
  }
};
ConfidenceInterval.prototype = {};
ConfidenceInterval.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.featureIndex = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.low = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.high = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ConfidenceInterval.prototype.write = function(output) {
  output.writeStructBegin('ConfidenceInterval');
  if (this.featureIndex !== null && this.featureIndex !== undefined) {
    output.writeFieldBegin('featureIndex', Thrift.Type.I32, 1);
    output.writeI32(this.featureIndex);
    output.writeFieldEnd();
  }
  if (this.low !== null && this.low !== undefined) {
    output.writeFieldBegin('low', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.low);
    output.writeFieldEnd();
  }
  if (this.high !== null && this.high !== undefined) {
    output.writeFieldBegin('high', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.high);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProjectExperimentsAndRuns = module.exports.ProjectExperimentsAndRuns = function(args) {
  this.projId = null;
  this.experiments = null;
  this.experimentRuns = null;
  if (args) {
    if (args.projId !== undefined && args.projId !== null) {
      this.projId = args.projId;
    }
    if (args.experiments !== undefined && args.experiments !== null) {
      this.experiments = Thrift.copyList(args.experiments, [ttypes.Experiment]);
    }
    if (args.experimentRuns !== undefined && args.experimentRuns !== null) {
      this.experimentRuns = Thrift.copyList(args.experimentRuns, [ttypes.ExperimentRun]);
    }
  }
};
ProjectExperimentsAndRuns.prototype = {};
ProjectExperimentsAndRuns.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.projId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size330 = 0;
        var _rtmp3334;
        this.experiments = [];
        var _etype333 = 0;
        _rtmp3334 = input.readListBegin();
        _etype333 = _rtmp3334.etype;
        _size330 = _rtmp3334.size;
        for (var _i335 = 0; _i335 < _size330; ++_i335)
        {
          var elem336 = null;
          elem336 = new ttypes.Experiment();
          elem336.read(input);
          this.experiments.push(elem336);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size337 = 0;
        var _rtmp3341;
        this.experimentRuns = [];
        var _etype340 = 0;
        _rtmp3341 = input.readListBegin();
        _etype340 = _rtmp3341.etype;
        _size337 = _rtmp3341.size;
        for (var _i342 = 0; _i342 < _size337; ++_i342)
        {
          var elem343 = null;
          elem343 = new ttypes.ExperimentRun();
          elem343.read(input);
          this.experimentRuns.push(elem343);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectExperimentsAndRuns.prototype.write = function(output) {
  output.writeStructBegin('ProjectExperimentsAndRuns');
  if (this.projId !== null && this.projId !== undefined) {
    output.writeFieldBegin('projId', Thrift.Type.I32, 1);
    output.writeI32(this.projId);
    output.writeFieldEnd();
  }
  if (this.experiments !== null && this.experiments !== undefined) {
    output.writeFieldBegin('experiments', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.experiments.length);
    for (var iter344 in this.experiments)
    {
      if (this.experiments.hasOwnProperty(iter344))
      {
        iter344 = this.experiments[iter344];
        iter344.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.experimentRuns !== null && this.experimentRuns !== undefined) {
    output.writeFieldBegin('experimentRuns', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.experimentRuns.length);
    for (var iter345 in this.experimentRuns)
    {
      if (this.experimentRuns.hasOwnProperty(iter345))
      {
        iter345 = this.experimentRuns[iter345];
        iter345.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ProjectOverviewResponse = module.exports.ProjectOverviewResponse = function(args) {
  this.project = null;
  this.numExperiments = null;
  this.numExperimentRuns = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.Project(args.project);
    }
    if (args.numExperiments !== undefined && args.numExperiments !== null) {
      this.numExperiments = args.numExperiments;
    }
    if (args.numExperimentRuns !== undefined && args.numExperimentRuns !== null) {
      this.numExperimentRuns = args.numExperimentRuns;
    }
  }
};
ProjectOverviewResponse.prototype = {};
ProjectOverviewResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.Project();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.numExperiments = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numExperimentRuns = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ProjectOverviewResponse.prototype.write = function(output) {
  output.writeStructBegin('ProjectOverviewResponse');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.numExperiments !== null && this.numExperiments !== undefined) {
    output.writeFieldBegin('numExperiments', Thrift.Type.I32, 2);
    output.writeI32(this.numExperiments);
    output.writeFieldEnd();
  }
  if (this.numExperimentRuns !== null && this.numExperimentRuns !== undefined) {
    output.writeFieldBegin('numExperimentRuns', Thrift.Type.I32, 3);
    output.writeI32(this.numExperimentRuns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ExperimentRunDetailsResponse = module.exports.ExperimentRunDetailsResponse = function(args) {
  this.project = null;
  this.experiment = null;
  this.experimentRun = null;
  this.modelResponses = null;
  if (args) {
    if (args.project !== undefined && args.project !== null) {
      this.project = new ttypes.Project(args.project);
    }
    if (args.experiment !== undefined && args.experiment !== null) {
      this.experiment = new ttypes.Experiment(args.experiment);
    }
    if (args.experimentRun !== undefined && args.experimentRun !== null) {
      this.experimentRun = new ttypes.ExperimentRun(args.experimentRun);
    }
    if (args.modelResponses !== undefined && args.modelResponses !== null) {
      this.modelResponses = Thrift.copyList(args.modelResponses, [ttypes.ModelResponse]);
    }
  }
};
ExperimentRunDetailsResponse.prototype = {};
ExperimentRunDetailsResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.project = new ttypes.Project();
        this.project.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.experiment = new ttypes.Experiment();
        this.experiment.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.experimentRun = new ttypes.ExperimentRun();
        this.experimentRun.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size346 = 0;
        var _rtmp3350;
        this.modelResponses = [];
        var _etype349 = 0;
        _rtmp3350 = input.readListBegin();
        _etype349 = _rtmp3350.etype;
        _size346 = _rtmp3350.size;
        for (var _i351 = 0; _i351 < _size346; ++_i351)
        {
          var elem352 = null;
          elem352 = new ttypes.ModelResponse();
          elem352.read(input);
          this.modelResponses.push(elem352);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExperimentRunDetailsResponse.prototype.write = function(output) {
  output.writeStructBegin('ExperimentRunDetailsResponse');
  if (this.project !== null && this.project !== undefined) {
    output.writeFieldBegin('project', Thrift.Type.STRUCT, 1);
    this.project.write(output);
    output.writeFieldEnd();
  }
  if (this.experiment !== null && this.experiment !== undefined) {
    output.writeFieldBegin('experiment', Thrift.Type.STRUCT, 2);
    this.experiment.write(output);
    output.writeFieldEnd();
  }
  if (this.experimentRun !== null && this.experimentRun !== undefined) {
    output.writeFieldBegin('experimentRun', Thrift.Type.STRUCT, 3);
    this.experimentRun.write(output);
    output.writeFieldEnd();
  }
  if (this.modelResponses !== null && this.modelResponses !== undefined) {
    output.writeFieldBegin('modelResponses', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.modelResponses.length);
    for (var iter353 in this.modelResponses)
    {
      if (this.modelResponses.hasOwnProperty(iter353))
      {
        iter353 = this.modelResponses[iter353];
        iter353.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResourceNotFoundException = module.exports.ResourceNotFoundException = function(args) {
  Thrift.TException.call(this, "ResourceNotFoundException")
  this.name = "ResourceNotFoundException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(ResourceNotFoundException, Thrift.TException);
ResourceNotFoundException.prototype.name = 'ResourceNotFoundException';
ResourceNotFoundException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResourceNotFoundException.prototype.write = function(output) {
  output.writeStructBegin('ResourceNotFoundException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidFieldException = module.exports.InvalidFieldException = function(args) {
  Thrift.TException.call(this, "InvalidFieldException")
  this.name = "InvalidFieldException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidFieldException, Thrift.TException);
InvalidFieldException.prototype.name = 'InvalidFieldException';
InvalidFieldException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidFieldException.prototype.write = function(output) {
  output.writeStructBegin('InvalidFieldException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BadRequestException = module.exports.BadRequestException = function(args) {
  Thrift.TException.call(this, "BadRequestException")
  this.name = "BadRequestException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(BadRequestException, Thrift.TException);
BadRequestException.prototype.name = 'BadRequestException';
BadRequestException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BadRequestException.prototype.write = function(output) {
  output.writeStructBegin('BadRequestException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IllegalOperationException = module.exports.IllegalOperationException = function(args) {
  Thrift.TException.call(this, "IllegalOperationException")
  this.name = "IllegalOperationException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(IllegalOperationException, Thrift.TException);
IllegalOperationException.prototype.name = 'IllegalOperationException';
IllegalOperationException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IllegalOperationException.prototype.write = function(output) {
  output.writeStructBegin('IllegalOperationException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ServerLogicException = module.exports.ServerLogicException = function(args) {
  Thrift.TException.call(this, "ServerLogicException")
  this.name = "ServerLogicException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(ServerLogicException, Thrift.TException);
ServerLogicException.prototype.name = 'ServerLogicException';
ServerLogicException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ServerLogicException.prototype.write = function(output) {
  output.writeStructBegin('ServerLogicException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

InvalidExperimentRunException = module.exports.InvalidExperimentRunException = function(args) {
  Thrift.TException.call(this, "InvalidExperimentRunException")
  this.name = "InvalidExperimentRunException"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(InvalidExperimentRunException, Thrift.TException);
InvalidExperimentRunException.prototype.name = 'InvalidExperimentRunException';
InvalidExperimentRunException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidExperimentRunException.prototype.write = function(output) {
  output.writeStructBegin('InvalidExperimentRunException');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

