//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./ModelDB_types');
//HELPER FUNCTIONS AND STRUCTURES

ModelDBService_testConnection_args = function(args) {
};
ModelDBService_testConnection_args.prototype = {};
ModelDBService_testConnection_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_testConnection_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_testConnection_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_testConnection_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ModelDBService_testConnection_result.prototype = {};
ModelDBService_testConnection_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_testConnection_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_testConnection_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_pathForTransformer_args = function(args) {
  this.transformerId = null;
  if (args) {
    if (args.transformerId !== undefined && args.transformerId !== null) {
      this.transformerId = args.transformerId;
    }
  }
};
ModelDBService_pathForTransformer_args.prototype = {};
ModelDBService_pathForTransformer_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.transformerId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_pathForTransformer_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_pathForTransformer_args');
  if (this.transformerId !== null && this.transformerId !== undefined) {
    output.writeFieldBegin('transformerId', Thrift.Type.I32, 1);
    output.writeI32(this.transformerId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_pathForTransformer_result = function(args) {
  this.success = null;
  this.rnfEx = null;
  this.efEx = null;
  this.svEx = null;
  if (args instanceof ttypes.ResourceNotFoundException) {
    this.rnfEx = args;
    return;
  }
  if (args instanceof ttypes.InvalidFieldException) {
    this.efEx = args;
    return;
  }
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.rnfEx !== undefined && args.rnfEx !== null) {
      this.rnfEx = args.rnfEx;
    }
    if (args.efEx !== undefined && args.efEx !== null) {
      this.efEx = args.efEx;
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_pathForTransformer_result.prototype = {};
ModelDBService_pathForTransformer_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rnfEx = new ttypes.ResourceNotFoundException();
        this.rnfEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.efEx = new ttypes.InvalidFieldException();
        this.efEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_pathForTransformer_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_pathForTransformer_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.rnfEx !== null && this.rnfEx !== undefined) {
    output.writeFieldBegin('rnfEx', Thrift.Type.STRUCT, 1);
    this.rnfEx.write(output);
    output.writeFieldEnd();
  }
  if (this.efEx !== null && this.efEx !== undefined) {
    output.writeFieldBegin('efEx', Thrift.Type.STRUCT, 2);
    this.efEx.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 3);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeFitEvent_args = function(args) {
  this.fe = null;
  if (args) {
    if (args.fe !== undefined && args.fe !== null) {
      this.fe = new ttypes.FitEvent(args.fe);
    }
  }
};
ModelDBService_storeFitEvent_args.prototype = {};
ModelDBService_storeFitEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.fe = new ttypes.FitEvent();
        this.fe.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeFitEvent_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeFitEvent_args');
  if (this.fe !== null && this.fe !== undefined) {
    output.writeFieldBegin('fe', Thrift.Type.STRUCT, 1);
    this.fe.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeFitEvent_result = function(args) {
  this.success = null;
  this.ierEx = null;
  this.svEx = null;
  if (args instanceof ttypes.InvalidExperimentRunException) {
    this.ierEx = args;
    return;
  }
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FitEventResponse(args.success);
    }
    if (args.ierEx !== undefined && args.ierEx !== null) {
      this.ierEx = args.ierEx;
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_storeFitEvent_result.prototype = {};
ModelDBService_storeFitEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FitEventResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ierEx = new ttypes.InvalidExperimentRunException();
        this.ierEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeFitEvent_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeFitEvent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ierEx !== null && this.ierEx !== undefined) {
    output.writeFieldBegin('ierEx', Thrift.Type.STRUCT, 1);
    this.ierEx.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 2);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeMetricEvent_args = function(args) {
  this.me = null;
  if (args) {
    if (args.me !== undefined && args.me !== null) {
      this.me = new ttypes.MetricEvent(args.me);
    }
  }
};
ModelDBService_storeMetricEvent_args.prototype = {};
ModelDBService_storeMetricEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.me = new ttypes.MetricEvent();
        this.me.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeMetricEvent_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeMetricEvent_args');
  if (this.me !== null && this.me !== undefined) {
    output.writeFieldBegin('me', Thrift.Type.STRUCT, 1);
    this.me.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeMetricEvent_result = function(args) {
  this.success = null;
  this.ierEx = null;
  this.svEx = null;
  if (args instanceof ttypes.InvalidExperimentRunException) {
    this.ierEx = args;
    return;
  }
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.MetricEventResponse(args.success);
    }
    if (args.ierEx !== undefined && args.ierEx !== null) {
      this.ierEx = args.ierEx;
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_storeMetricEvent_result.prototype = {};
ModelDBService_storeMetricEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.MetricEventResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ierEx = new ttypes.InvalidExperimentRunException();
        this.ierEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeMetricEvent_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeMetricEvent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ierEx !== null && this.ierEx !== undefined) {
    output.writeFieldBegin('ierEx', Thrift.Type.STRUCT, 1);
    this.ierEx.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 2);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeTransformEvent_args = function(args) {
  this.te = null;
  if (args) {
    if (args.te !== undefined && args.te !== null) {
      this.te = new ttypes.TransformEvent(args.te);
    }
  }
};
ModelDBService_storeTransformEvent_args.prototype = {};
ModelDBService_storeTransformEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.te = new ttypes.TransformEvent();
        this.te.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeTransformEvent_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeTransformEvent_args');
  if (this.te !== null && this.te !== undefined) {
    output.writeFieldBegin('te', Thrift.Type.STRUCT, 1);
    this.te.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeTransformEvent_result = function(args) {
  this.success = null;
  this.ierEx = null;
  this.svEx = null;
  if (args instanceof ttypes.InvalidExperimentRunException) {
    this.ierEx = args;
    return;
  }
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TransformEventResponse(args.success);
    }
    if (args.ierEx !== undefined && args.ierEx !== null) {
      this.ierEx = args.ierEx;
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_storeTransformEvent_result.prototype = {};
ModelDBService_storeTransformEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TransformEventResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ierEx = new ttypes.InvalidExperimentRunException();
        this.ierEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeTransformEvent_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeTransformEvent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.ierEx !== null && this.ierEx !== undefined) {
    output.writeFieldBegin('ierEx', Thrift.Type.STRUCT, 1);
    this.ierEx.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 2);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeRandomSplitEvent_args = function(args) {
  this.rse = null;
  if (args) {
    if (args.rse !== undefined && args.rse !== null) {
      this.rse = new ttypes.RandomSplitEvent(args.rse);
    }
  }
};
ModelDBService_storeRandomSplitEvent_args.prototype = {};
ModelDBService_storeRandomSplitEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rse = new ttypes.RandomSplitEvent();
        this.rse.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeRandomSplitEvent_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeRandomSplitEvent_args');
  if (this.rse !== null && this.rse !== undefined) {
    output.writeFieldBegin('rse', Thrift.Type.STRUCT, 1);
    this.rse.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeRandomSplitEvent_result = function(args) {
  this.success = null;
  this.svEx = null;
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.RandomSplitEventResponse(args.success);
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_storeRandomSplitEvent_result.prototype = {};
ModelDBService_storeRandomSplitEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.RandomSplitEventResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeRandomSplitEvent_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeRandomSplitEvent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 1);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storePipelineEvent_args = function(args) {
  this.pipelineEvent = null;
  if (args) {
    if (args.pipelineEvent !== undefined && args.pipelineEvent !== null) {
      this.pipelineEvent = new ttypes.PipelineEvent(args.pipelineEvent);
    }
  }
};
ModelDBService_storePipelineEvent_args.prototype = {};
ModelDBService_storePipelineEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pipelineEvent = new ttypes.PipelineEvent();
        this.pipelineEvent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storePipelineEvent_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storePipelineEvent_args');
  if (this.pipelineEvent !== null && this.pipelineEvent !== undefined) {
    output.writeFieldBegin('pipelineEvent', Thrift.Type.STRUCT, 1);
    this.pipelineEvent.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storePipelineEvent_result = function(args) {
  this.success = null;
  this.svEx = null;
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PipelineEventResponse(args.success);
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_storePipelineEvent_result.prototype = {};
ModelDBService_storePipelineEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PipelineEventResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storePipelineEvent_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storePipelineEvent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 1);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeCrossValidationEvent_args = function(args) {
  this.cve = null;
  if (args) {
    if (args.cve !== undefined && args.cve !== null) {
      this.cve = new ttypes.CrossValidationEvent(args.cve);
    }
  }
};
ModelDBService_storeCrossValidationEvent_args.prototype = {};
ModelDBService_storeCrossValidationEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.cve = new ttypes.CrossValidationEvent();
        this.cve.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeCrossValidationEvent_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeCrossValidationEvent_args');
  if (this.cve !== null && this.cve !== undefined) {
    output.writeFieldBegin('cve', Thrift.Type.STRUCT, 1);
    this.cve.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeCrossValidationEvent_result = function(args) {
  this.success = null;
  this.svEx = null;
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CrossValidationEventResponse(args.success);
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_storeCrossValidationEvent_result.prototype = {};
ModelDBService_storeCrossValidationEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CrossValidationEventResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeCrossValidationEvent_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeCrossValidationEvent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 1);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeGridSearchCrossValidationEvent_args = function(args) {
  this.gscve = null;
  if (args) {
    if (args.gscve !== undefined && args.gscve !== null) {
      this.gscve = new ttypes.GridSearchCrossValidationEvent(args.gscve);
    }
  }
};
ModelDBService_storeGridSearchCrossValidationEvent_args.prototype = {};
ModelDBService_storeGridSearchCrossValidationEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.gscve = new ttypes.GridSearchCrossValidationEvent();
        this.gscve.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeGridSearchCrossValidationEvent_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeGridSearchCrossValidationEvent_args');
  if (this.gscve !== null && this.gscve !== undefined) {
    output.writeFieldBegin('gscve', Thrift.Type.STRUCT, 1);
    this.gscve.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeGridSearchCrossValidationEvent_result = function(args) {
  this.success = null;
  this.svEx = null;
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.GridSearchCrossValidationEventResponse(args.success);
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_storeGridSearchCrossValidationEvent_result.prototype = {};
ModelDBService_storeGridSearchCrossValidationEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.GridSearchCrossValidationEventResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeGridSearchCrossValidationEvent_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeGridSearchCrossValidationEvent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 1);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeAnnotationEvent_args = function(args) {
  this.ae = null;
  if (args) {
    if (args.ae !== undefined && args.ae !== null) {
      this.ae = new ttypes.AnnotationEvent(args.ae);
    }
  }
};
ModelDBService_storeAnnotationEvent_args.prototype = {};
ModelDBService_storeAnnotationEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ae = new ttypes.AnnotationEvent();
        this.ae.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeAnnotationEvent_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeAnnotationEvent_args');
  if (this.ae !== null && this.ae !== undefined) {
    output.writeFieldBegin('ae', Thrift.Type.STRUCT, 1);
    this.ae.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeAnnotationEvent_result = function(args) {
  this.success = null;
  this.svEx = null;
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AnnotationEventResponse(args.success);
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_storeAnnotationEvent_result.prototype = {};
ModelDBService_storeAnnotationEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AnnotationEventResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeAnnotationEvent_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeAnnotationEvent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 1);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeProjectEvent_args = function(args) {
  this.pr = null;
  if (args) {
    if (args.pr !== undefined && args.pr !== null) {
      this.pr = new ttypes.ProjectEvent(args.pr);
    }
  }
};
ModelDBService_storeProjectEvent_args.prototype = {};
ModelDBService_storeProjectEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pr = new ttypes.ProjectEvent();
        this.pr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeProjectEvent_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeProjectEvent_args');
  if (this.pr !== null && this.pr !== undefined) {
    output.writeFieldBegin('pr', Thrift.Type.STRUCT, 1);
    this.pr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeProjectEvent_result = function(args) {
  this.success = null;
  this.svEx = null;
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectEventResponse(args.success);
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_storeProjectEvent_result.prototype = {};
ModelDBService_storeProjectEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectEventResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeProjectEvent_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeProjectEvent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 1);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeExperimentEvent_args = function(args) {
  this.er = null;
  if (args) {
    if (args.er !== undefined && args.er !== null) {
      this.er = new ttypes.ExperimentEvent(args.er);
    }
  }
};
ModelDBService_storeExperimentEvent_args.prototype = {};
ModelDBService_storeExperimentEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.er = new ttypes.ExperimentEvent();
        this.er.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeExperimentEvent_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeExperimentEvent_args');
  if (this.er !== null && this.er !== undefined) {
    output.writeFieldBegin('er', Thrift.Type.STRUCT, 1);
    this.er.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeExperimentEvent_result = function(args) {
  this.success = null;
  this.svEx = null;
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ExperimentEventResponse(args.success);
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_storeExperimentEvent_result.prototype = {};
ModelDBService_storeExperimentEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExperimentEventResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeExperimentEvent_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeExperimentEvent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 1);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeExperimentRunEvent_args = function(args) {
  this.er = null;
  if (args) {
    if (args.er !== undefined && args.er !== null) {
      this.er = new ttypes.ExperimentRunEvent(args.er);
    }
  }
};
ModelDBService_storeExperimentRunEvent_args.prototype = {};
ModelDBService_storeExperimentRunEvent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.er = new ttypes.ExperimentRunEvent();
        this.er.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeExperimentRunEvent_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeExperimentRunEvent_args');
  if (this.er !== null && this.er !== undefined) {
    output.writeFieldBegin('er', Thrift.Type.STRUCT, 1);
    this.er.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeExperimentRunEvent_result = function(args) {
  this.success = null;
  this.svEx = null;
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ExperimentRunEventResponse(args.success);
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_storeExperimentRunEvent_result.prototype = {};
ModelDBService_storeExperimentRunEvent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExperimentRunEventResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeExperimentRunEvent_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeExperimentRunEvent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 1);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeLinearModel_args = function(args) {
  this.modelId = null;
  this.model = null;
  if (args) {
    if (args.modelId !== undefined && args.modelId !== null) {
      this.modelId = args.modelId;
    }
    if (args.model !== undefined && args.model !== null) {
      this.model = new ttypes.LinearModel(args.model);
    }
  }
};
ModelDBService_storeLinearModel_args.prototype = {};
ModelDBService_storeLinearModel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.modelId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.model = new ttypes.LinearModel();
        this.model.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeLinearModel_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeLinearModel_args');
  if (this.modelId !== null && this.modelId !== undefined) {
    output.writeFieldBegin('modelId', Thrift.Type.I32, 1);
    output.writeI32(this.modelId);
    output.writeFieldEnd();
  }
  if (this.model !== null && this.model !== undefined) {
    output.writeFieldBegin('model', Thrift.Type.STRUCT, 2);
    this.model.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_storeLinearModel_result = function(args) {
  this.success = null;
  this.rnfEx = null;
  this.svEx = null;
  if (args instanceof ttypes.ResourceNotFoundException) {
    this.rnfEx = args;
    return;
  }
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.rnfEx !== undefined && args.rnfEx !== null) {
      this.rnfEx = args.rnfEx;
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_storeLinearModel_result.prototype = {};
ModelDBService_storeLinearModel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rnfEx = new ttypes.ResourceNotFoundException();
        this.rnfEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_storeLinearModel_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_storeLinearModel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.rnfEx !== null && this.rnfEx !== undefined) {
    output.writeFieldBegin('rnfEx', Thrift.Type.STRUCT, 1);
    this.rnfEx.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 2);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getDataFrameAncestry_args = function(args) {
  this.dataFrameId = null;
  if (args) {
    if (args.dataFrameId !== undefined && args.dataFrameId !== null) {
      this.dataFrameId = args.dataFrameId;
    }
  }
};
ModelDBService_getDataFrameAncestry_args.prototype = {};
ModelDBService_getDataFrameAncestry_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.dataFrameId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getDataFrameAncestry_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getDataFrameAncestry_args');
  if (this.dataFrameId !== null && this.dataFrameId !== undefined) {
    output.writeFieldBegin('dataFrameId', Thrift.Type.I32, 1);
    output.writeI32(this.dataFrameId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getDataFrameAncestry_result = function(args) {
  this.success = null;
  this.rnfEx = null;
  this.svEx = null;
  if (args instanceof ttypes.ResourceNotFoundException) {
    this.rnfEx = args;
    return;
  }
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.DataFrameAncestry(args.success);
    }
    if (args.rnfEx !== undefined && args.rnfEx !== null) {
      this.rnfEx = args.rnfEx;
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_getDataFrameAncestry_result.prototype = {};
ModelDBService_getDataFrameAncestry_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.DataFrameAncestry();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rnfEx = new ttypes.ResourceNotFoundException();
        this.rnfEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getDataFrameAncestry_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getDataFrameAncestry_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.rnfEx !== null && this.rnfEx !== undefined) {
    output.writeFieldBegin('rnfEx', Thrift.Type.STRUCT, 1);
    this.rnfEx.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 2);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getCommonAncestor_args = function(args) {
  this.dfId1 = null;
  this.dfId2 = null;
  if (args) {
    if (args.dfId1 !== undefined && args.dfId1 !== null) {
      this.dfId1 = args.dfId1;
    }
    if (args.dfId2 !== undefined && args.dfId2 !== null) {
      this.dfId2 = args.dfId2;
    }
  }
};
ModelDBService_getCommonAncestor_args.prototype = {};
ModelDBService_getCommonAncestor_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.dfId1 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.dfId2 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getCommonAncestor_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getCommonAncestor_args');
  if (this.dfId1 !== null && this.dfId1 !== undefined) {
    output.writeFieldBegin('dfId1', Thrift.Type.I32, 1);
    output.writeI32(this.dfId1);
    output.writeFieldEnd();
  }
  if (this.dfId2 !== null && this.dfId2 !== undefined) {
    output.writeFieldBegin('dfId2', Thrift.Type.I32, 2);
    output.writeI32(this.dfId2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getCommonAncestor_result = function(args) {
  this.success = null;
  this.rnfEx = null;
  this.svEx = null;
  if (args instanceof ttypes.ResourceNotFoundException) {
    this.rnfEx = args;
    return;
  }
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CommonAncestor(args.success);
    }
    if (args.rnfEx !== undefined && args.rnfEx !== null) {
      this.rnfEx = args.rnfEx;
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_getCommonAncestor_result.prototype = {};
ModelDBService_getCommonAncestor_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CommonAncestor();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rnfEx = new ttypes.ResourceNotFoundException();
        this.rnfEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getCommonAncestor_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getCommonAncestor_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.rnfEx !== null && this.rnfEx !== undefined) {
    output.writeFieldBegin('rnfEx', Thrift.Type.STRUCT, 1);
    this.rnfEx.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 2);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getCommonAncestorForModels_args = function(args) {
  this.modelId1 = null;
  this.modelId2 = null;
  if (args) {
    if (args.modelId1 !== undefined && args.modelId1 !== null) {
      this.modelId1 = args.modelId1;
    }
    if (args.modelId2 !== undefined && args.modelId2 !== null) {
      this.modelId2 = args.modelId2;
    }
  }
};
ModelDBService_getCommonAncestorForModels_args.prototype = {};
ModelDBService_getCommonAncestorForModels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.modelId1 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.modelId2 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getCommonAncestorForModels_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getCommonAncestorForModels_args');
  if (this.modelId1 !== null && this.modelId1 !== undefined) {
    output.writeFieldBegin('modelId1', Thrift.Type.I32, 1);
    output.writeI32(this.modelId1);
    output.writeFieldEnd();
  }
  if (this.modelId2 !== null && this.modelId2 !== undefined) {
    output.writeFieldBegin('modelId2', Thrift.Type.I32, 2);
    output.writeI32(this.modelId2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getCommonAncestorForModels_result = function(args) {
  this.success = null;
  this.rnfEx = null;
  this.svEx = null;
  if (args instanceof ttypes.ResourceNotFoundException) {
    this.rnfEx = args;
    return;
  }
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CommonAncestor(args.success);
    }
    if (args.rnfEx !== undefined && args.rnfEx !== null) {
      this.rnfEx = args.rnfEx;
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_getCommonAncestorForModels_result.prototype = {};
ModelDBService_getCommonAncestorForModels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CommonAncestor();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rnfEx = new ttypes.ResourceNotFoundException();
        this.rnfEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getCommonAncestorForModels_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getCommonAncestorForModels_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.rnfEx !== null && this.rnfEx !== undefined) {
    output.writeFieldBegin('rnfEx', Thrift.Type.STRUCT, 1);
    this.rnfEx.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 2);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getTrainingRowsCount_args = function(args) {
  this.modelId = null;
  if (args) {
    if (args.modelId !== undefined && args.modelId !== null) {
      this.modelId = args.modelId;
    }
  }
};
ModelDBService_getTrainingRowsCount_args.prototype = {};
ModelDBService_getTrainingRowsCount_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.modelId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getTrainingRowsCount_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getTrainingRowsCount_args');
  if (this.modelId !== null && this.modelId !== undefined) {
    output.writeFieldBegin('modelId', Thrift.Type.I32, 1);
    output.writeI32(this.modelId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getTrainingRowsCount_result = function(args) {
  this.success = null;
  this.rnfEx = null;
  this.svEx = null;
  if (args instanceof ttypes.ResourceNotFoundException) {
    this.rnfEx = args;
    return;
  }
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.rnfEx !== undefined && args.rnfEx !== null) {
      this.rnfEx = args.rnfEx;
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_getTrainingRowsCount_result.prototype = {};
ModelDBService_getTrainingRowsCount_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rnfEx = new ttypes.ResourceNotFoundException();
        this.rnfEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getTrainingRowsCount_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getTrainingRowsCount_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.rnfEx !== null && this.rnfEx !== undefined) {
    output.writeFieldBegin('rnfEx', Thrift.Type.STRUCT, 1);
    this.rnfEx.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 2);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getTrainingRowsCounts_args = function(args) {
  this.modelIds = null;
  if (args) {
    if (args.modelIds !== undefined && args.modelIds !== null) {
      this.modelIds = Thrift.copyList(args.modelIds, [null]);
    }
  }
};
ModelDBService_getTrainingRowsCounts_args.prototype = {};
ModelDBService_getTrainingRowsCounts_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size354 = 0;
        var _rtmp3358;
        this.modelIds = [];
        var _etype357 = 0;
        _rtmp3358 = input.readListBegin();
        _etype357 = _rtmp3358.etype;
        _size354 = _rtmp3358.size;
        for (var _i359 = 0; _i359 < _size354; ++_i359)
        {
          var elem360 = null;
          elem360 = input.readI32();
          this.modelIds.push(elem360);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getTrainingRowsCounts_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getTrainingRowsCounts_args');
  if (this.modelIds !== null && this.modelIds !== undefined) {
    output.writeFieldBegin('modelIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.modelIds.length);
    for (var iter361 in this.modelIds)
    {
      if (this.modelIds.hasOwnProperty(iter361))
      {
        iter361 = this.modelIds[iter361];
        output.writeI32(iter361);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getTrainingRowsCounts_result = function(args) {
  this.success = null;
  this.svEx = null;
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_getTrainingRowsCounts_result.prototype = {};
ModelDBService_getTrainingRowsCounts_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size362 = 0;
        var _rtmp3366;
        this.success = [];
        var _etype365 = 0;
        _rtmp3366 = input.readListBegin();
        _etype365 = _rtmp3366.etype;
        _size362 = _rtmp3366.size;
        for (var _i367 = 0; _i367 < _size362; ++_i367)
        {
          var elem368 = null;
          elem368 = input.readI32();
          this.success.push(elem368);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getTrainingRowsCounts_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getTrainingRowsCounts_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter369 in this.success)
    {
      if (this.success.hasOwnProperty(iter369))
      {
        iter369 = this.success[iter369];
        output.writeI32(iter369);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 1);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_compareHyperparameters_args = function(args) {
  this.modelId1 = null;
  this.modelId2 = null;
  if (args) {
    if (args.modelId1 !== undefined && args.modelId1 !== null) {
      this.modelId1 = args.modelId1;
    }
    if (args.modelId2 !== undefined && args.modelId2 !== null) {
      this.modelId2 = args.modelId2;
    }
  }
};
ModelDBService_compareHyperparameters_args.prototype = {};
ModelDBService_compareHyperparameters_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.modelId1 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.modelId2 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_compareHyperparameters_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_compareHyperparameters_args');
  if (this.modelId1 !== null && this.modelId1 !== undefined) {
    output.writeFieldBegin('modelId1', Thrift.Type.I32, 1);
    output.writeI32(this.modelId1);
    output.writeFieldEnd();
  }
  if (this.modelId2 !== null && this.modelId2 !== undefined) {
    output.writeFieldBegin('modelId2', Thrift.Type.I32, 2);
    output.writeI32(this.modelId2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_compareHyperparameters_result = function(args) {
  this.success = null;
  this.rnfEx = null;
  this.svEx = null;
  if (args instanceof ttypes.ResourceNotFoundException) {
    this.rnfEx = args;
    return;
  }
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CompareHyperParametersResponse(args.success);
    }
    if (args.rnfEx !== undefined && args.rnfEx !== null) {
      this.rnfEx = args.rnfEx;
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_compareHyperparameters_result.prototype = {};
ModelDBService_compareHyperparameters_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CompareHyperParametersResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rnfEx = new ttypes.ResourceNotFoundException();
        this.rnfEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_compareHyperparameters_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_compareHyperparameters_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.rnfEx !== null && this.rnfEx !== undefined) {
    output.writeFieldBegin('rnfEx', Thrift.Type.STRUCT, 1);
    this.rnfEx.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 2);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_compareFeatures_args = function(args) {
  this.modelId1 = null;
  this.modelId2 = null;
  if (args) {
    if (args.modelId1 !== undefined && args.modelId1 !== null) {
      this.modelId1 = args.modelId1;
    }
    if (args.modelId2 !== undefined && args.modelId2 !== null) {
      this.modelId2 = args.modelId2;
    }
  }
};
ModelDBService_compareFeatures_args.prototype = {};
ModelDBService_compareFeatures_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.modelId1 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.modelId2 = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_compareFeatures_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_compareFeatures_args');
  if (this.modelId1 !== null && this.modelId1 !== undefined) {
    output.writeFieldBegin('modelId1', Thrift.Type.I32, 1);
    output.writeI32(this.modelId1);
    output.writeFieldEnd();
  }
  if (this.modelId2 !== null && this.modelId2 !== undefined) {
    output.writeFieldBegin('modelId2', Thrift.Type.I32, 2);
    output.writeI32(this.modelId2);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_compareFeatures_result = function(args) {
  this.success = null;
  this.rnfEx = null;
  this.svEx = null;
  if (args instanceof ttypes.ResourceNotFoundException) {
    this.rnfEx = args;
    return;
  }
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.CompareFeaturesResponse(args.success);
    }
    if (args.rnfEx !== undefined && args.rnfEx !== null) {
      this.rnfEx = args.rnfEx;
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_compareFeatures_result.prototype = {};
ModelDBService_compareFeatures_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.CompareFeaturesResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rnfEx = new ttypes.ResourceNotFoundException();
        this.rnfEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_compareFeatures_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_compareFeatures_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.rnfEx !== null && this.rnfEx !== undefined) {
    output.writeFieldBegin('rnfEx', Thrift.Type.STRUCT, 1);
    this.rnfEx.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 2);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_groupByProblemType_args = function(args) {
  this.modelIds = null;
  if (args) {
    if (args.modelIds !== undefined && args.modelIds !== null) {
      this.modelIds = Thrift.copyList(args.modelIds, [null]);
    }
  }
};
ModelDBService_groupByProblemType_args.prototype = {};
ModelDBService_groupByProblemType_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size370 = 0;
        var _rtmp3374;
        this.modelIds = [];
        var _etype373 = 0;
        _rtmp3374 = input.readListBegin();
        _etype373 = _rtmp3374.etype;
        _size370 = _rtmp3374.size;
        for (var _i375 = 0; _i375 < _size370; ++_i375)
        {
          var elem376 = null;
          elem376 = input.readI32();
          this.modelIds.push(elem376);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_groupByProblemType_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_groupByProblemType_args');
  if (this.modelIds !== null && this.modelIds !== undefined) {
    output.writeFieldBegin('modelIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.modelIds.length);
    for (var iter377 in this.modelIds)
    {
      if (this.modelIds.hasOwnProperty(iter377))
      {
        iter377 = this.modelIds[iter377];
        output.writeI32(iter377);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_groupByProblemType_result = function(args) {
  this.success = null;
  this.svEx = null;
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_groupByProblemType_result.prototype = {};
ModelDBService_groupByProblemType_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size378 = 0;
        var _rtmp3382;
        this.success = {};
        var _ktype379 = 0;
        var _vtype380 = 0;
        _rtmp3382 = input.readMapBegin();
        _ktype379 = _rtmp3382.ktype;
        _vtype380 = _rtmp3382.vtype;
        _size378 = _rtmp3382.size;
        for (var _i383 = 0; _i383 < _size378; ++_i383)
        {
          var key384 = null;
          var val385 = null;
          key384 = input.readI32();
          var _size386 = 0;
          var _rtmp3390;
          val385 = [];
          var _etype389 = 0;
          _rtmp3390 = input.readListBegin();
          _etype389 = _rtmp3390.etype;
          _size386 = _rtmp3390.size;
          for (var _i391 = 0; _i391 < _size386; ++_i391)
          {
            var elem392 = null;
            elem392 = input.readI32();
            val385.push(elem392);
          }
          input.readListEnd();
          this.success[key384] = val385;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_groupByProblemType_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_groupByProblemType_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.I32, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter393 in this.success)
    {
      if (this.success.hasOwnProperty(kiter393))
      {
        var viter394 = this.success[kiter393];
        output.writeI32(kiter393);
        output.writeListBegin(Thrift.Type.I32, viter394.length);
        for (var iter395 in viter394)
        {
          if (viter394.hasOwnProperty(iter395))
          {
            iter395 = viter394[iter395];
            output.writeI32(iter395);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 1);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_similarModels_args = function(args) {
  this.modelId = null;
  this.compMetrics = null;
  this.numModels = null;
  if (args) {
    if (args.modelId !== undefined && args.modelId !== null) {
      this.modelId = args.modelId;
    }
    if (args.compMetrics !== undefined && args.compMetrics !== null) {
      this.compMetrics = Thrift.copyList(args.compMetrics, [null]);
    }
    if (args.numModels !== undefined && args.numModels !== null) {
      this.numModels = args.numModels;
    }
  }
};
ModelDBService_similarModels_args.prototype = {};
ModelDBService_similarModels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.modelId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size396 = 0;
        var _rtmp3400;
        this.compMetrics = [];
        var _etype399 = 0;
        _rtmp3400 = input.readListBegin();
        _etype399 = _rtmp3400.etype;
        _size396 = _rtmp3400.size;
        for (var _i401 = 0; _i401 < _size396; ++_i401)
        {
          var elem402 = null;
          elem402 = input.readI32();
          this.compMetrics.push(elem402);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.numModels = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_similarModels_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_similarModels_args');
  if (this.modelId !== null && this.modelId !== undefined) {
    output.writeFieldBegin('modelId', Thrift.Type.I32, 1);
    output.writeI32(this.modelId);
    output.writeFieldEnd();
  }
  if (this.compMetrics !== null && this.compMetrics !== undefined) {
    output.writeFieldBegin('compMetrics', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.compMetrics.length);
    for (var iter403 in this.compMetrics)
    {
      if (this.compMetrics.hasOwnProperty(iter403))
      {
        iter403 = this.compMetrics[iter403];
        output.writeI32(iter403);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.numModels !== null && this.numModels !== undefined) {
    output.writeFieldBegin('numModels', Thrift.Type.I32, 3);
    output.writeI32(this.numModels);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_similarModels_result = function(args) {
  this.success = null;
  this.rnfEx = null;
  this.brEx = null;
  this.svEx = null;
  if (args instanceof ttypes.ResourceNotFoundException) {
    this.rnfEx = args;
    return;
  }
  if (args instanceof ttypes.BadRequestException) {
    this.brEx = args;
    return;
  }
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.rnfEx !== undefined && args.rnfEx !== null) {
      this.rnfEx = args.rnfEx;
    }
    if (args.brEx !== undefined && args.brEx !== null) {
      this.brEx = args.brEx;
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_similarModels_result.prototype = {};
ModelDBService_similarModels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size404 = 0;
        var _rtmp3408;
        this.success = [];
        var _etype407 = 0;
        _rtmp3408 = input.readListBegin();
        _etype407 = _rtmp3408.etype;
        _size404 = _rtmp3408.size;
        for (var _i409 = 0; _i409 < _size404; ++_i409)
        {
          var elem410 = null;
          elem410 = input.readI32();
          this.success.push(elem410);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rnfEx = new ttypes.ResourceNotFoundException();
        this.rnfEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.brEx = new ttypes.BadRequestException();
        this.brEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_similarModels_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_similarModels_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter411 in this.success)
    {
      if (this.success.hasOwnProperty(iter411))
      {
        iter411 = this.success[iter411];
        output.writeI32(iter411);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rnfEx !== null && this.rnfEx !== undefined) {
    output.writeFieldBegin('rnfEx', Thrift.Type.STRUCT, 1);
    this.rnfEx.write(output);
    output.writeFieldEnd();
  }
  if (this.brEx !== null && this.brEx !== undefined) {
    output.writeFieldBegin('brEx', Thrift.Type.STRUCT, 2);
    this.brEx.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 3);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_linearModelFeatureImportances_args = function(args) {
  this.modelId = null;
  if (args) {
    if (args.modelId !== undefined && args.modelId !== null) {
      this.modelId = args.modelId;
    }
  }
};
ModelDBService_linearModelFeatureImportances_args.prototype = {};
ModelDBService_linearModelFeatureImportances_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.modelId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_linearModelFeatureImportances_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_linearModelFeatureImportances_args');
  if (this.modelId !== null && this.modelId !== undefined) {
    output.writeFieldBegin('modelId', Thrift.Type.I32, 1);
    output.writeI32(this.modelId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_linearModelFeatureImportances_result = function(args) {
  this.success = null;
  this.rnfEx = null;
  this.ioEx = null;
  this.svEx = null;
  if (args instanceof ttypes.ResourceNotFoundException) {
    this.rnfEx = args;
    return;
  }
  if (args instanceof ttypes.IllegalOperationException) {
    this.ioEx = args;
    return;
  }
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.rnfEx !== undefined && args.rnfEx !== null) {
      this.rnfEx = args.rnfEx;
    }
    if (args.ioEx !== undefined && args.ioEx !== null) {
      this.ioEx = args.ioEx;
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_linearModelFeatureImportances_result.prototype = {};
ModelDBService_linearModelFeatureImportances_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size412 = 0;
        var _rtmp3416;
        this.success = [];
        var _etype415 = 0;
        _rtmp3416 = input.readListBegin();
        _etype415 = _rtmp3416.etype;
        _size412 = _rtmp3416.size;
        for (var _i417 = 0; _i417 < _size412; ++_i417)
        {
          var elem418 = null;
          elem418 = input.readString();
          this.success.push(elem418);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rnfEx = new ttypes.ResourceNotFoundException();
        this.rnfEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioEx = new ttypes.IllegalOperationException();
        this.ioEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_linearModelFeatureImportances_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_linearModelFeatureImportances_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter419 in this.success)
    {
      if (this.success.hasOwnProperty(iter419))
      {
        iter419 = this.success[iter419];
        output.writeString(iter419);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rnfEx !== null && this.rnfEx !== undefined) {
    output.writeFieldBegin('rnfEx', Thrift.Type.STRUCT, 1);
    this.rnfEx.write(output);
    output.writeFieldEnd();
  }
  if (this.ioEx !== null && this.ioEx !== undefined) {
    output.writeFieldBegin('ioEx', Thrift.Type.STRUCT, 2);
    this.ioEx.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 3);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_compareLinearModelFeatureImportances_args = function(args) {
  this.model1Id = null;
  this.model2Id = null;
  if (args) {
    if (args.model1Id !== undefined && args.model1Id !== null) {
      this.model1Id = args.model1Id;
    }
    if (args.model2Id !== undefined && args.model2Id !== null) {
      this.model2Id = args.model2Id;
    }
  }
};
ModelDBService_compareLinearModelFeatureImportances_args.prototype = {};
ModelDBService_compareLinearModelFeatureImportances_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.model1Id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.model2Id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_compareLinearModelFeatureImportances_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_compareLinearModelFeatureImportances_args');
  if (this.model1Id !== null && this.model1Id !== undefined) {
    output.writeFieldBegin('model1Id', Thrift.Type.I32, 1);
    output.writeI32(this.model1Id);
    output.writeFieldEnd();
  }
  if (this.model2Id !== null && this.model2Id !== undefined) {
    output.writeFieldBegin('model2Id', Thrift.Type.I32, 2);
    output.writeI32(this.model2Id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_compareLinearModelFeatureImportances_result = function(args) {
  this.success = null;
  this.rnfEx = null;
  this.ioEx = null;
  this.svEx = null;
  if (args instanceof ttypes.ResourceNotFoundException) {
    this.rnfEx = args;
    return;
  }
  if (args instanceof ttypes.IllegalOperationException) {
    this.ioEx = args;
    return;
  }
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.FeatureImportanceComparison]);
    }
    if (args.rnfEx !== undefined && args.rnfEx !== null) {
      this.rnfEx = args.rnfEx;
    }
    if (args.ioEx !== undefined && args.ioEx !== null) {
      this.ioEx = args.ioEx;
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_compareLinearModelFeatureImportances_result.prototype = {};
ModelDBService_compareLinearModelFeatureImportances_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size420 = 0;
        var _rtmp3424;
        this.success = [];
        var _etype423 = 0;
        _rtmp3424 = input.readListBegin();
        _etype423 = _rtmp3424.etype;
        _size420 = _rtmp3424.size;
        for (var _i425 = 0; _i425 < _size420; ++_i425)
        {
          var elem426 = null;
          elem426 = new ttypes.FeatureImportanceComparison();
          elem426.read(input);
          this.success.push(elem426);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rnfEx = new ttypes.ResourceNotFoundException();
        this.rnfEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioEx = new ttypes.IllegalOperationException();
        this.ioEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_compareLinearModelFeatureImportances_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_compareLinearModelFeatureImportances_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter427 in this.success)
    {
      if (this.success.hasOwnProperty(iter427))
      {
        iter427 = this.success[iter427];
        iter427.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rnfEx !== null && this.rnfEx !== undefined) {
    output.writeFieldBegin('rnfEx', Thrift.Type.STRUCT, 1);
    this.rnfEx.write(output);
    output.writeFieldEnd();
  }
  if (this.ioEx !== null && this.ioEx !== undefined) {
    output.writeFieldBegin('ioEx', Thrift.Type.STRUCT, 2);
    this.ioEx.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 3);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_iterationsUntilConvergence_args = function(args) {
  this.modelIds = null;
  this.tolerance = null;
  if (args) {
    if (args.modelIds !== undefined && args.modelIds !== null) {
      this.modelIds = Thrift.copyList(args.modelIds, [null]);
    }
    if (args.tolerance !== undefined && args.tolerance !== null) {
      this.tolerance = args.tolerance;
    }
  }
};
ModelDBService_iterationsUntilConvergence_args.prototype = {};
ModelDBService_iterationsUntilConvergence_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size428 = 0;
        var _rtmp3432;
        this.modelIds = [];
        var _etype431 = 0;
        _rtmp3432 = input.readListBegin();
        _etype431 = _rtmp3432.etype;
        _size428 = _rtmp3432.size;
        for (var _i433 = 0; _i433 < _size428; ++_i433)
        {
          var elem434 = null;
          elem434 = input.readI32();
          this.modelIds.push(elem434);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.tolerance = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_iterationsUntilConvergence_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_iterationsUntilConvergence_args');
  if (this.modelIds !== null && this.modelIds !== undefined) {
    output.writeFieldBegin('modelIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.modelIds.length);
    for (var iter435 in this.modelIds)
    {
      if (this.modelIds.hasOwnProperty(iter435))
      {
        iter435 = this.modelIds[iter435];
        output.writeI32(iter435);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.tolerance !== null && this.tolerance !== undefined) {
    output.writeFieldBegin('tolerance', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.tolerance);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_iterationsUntilConvergence_result = function(args) {
  this.success = null;
  this.svEx = null;
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_iterationsUntilConvergence_result.prototype = {};
ModelDBService_iterationsUntilConvergence_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size436 = 0;
        var _rtmp3440;
        this.success = [];
        var _etype439 = 0;
        _rtmp3440 = input.readListBegin();
        _etype439 = _rtmp3440.etype;
        _size436 = _rtmp3440.size;
        for (var _i441 = 0; _i441 < _size436; ++_i441)
        {
          var elem442 = null;
          elem442 = input.readI32();
          this.success.push(elem442);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_iterationsUntilConvergence_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_iterationsUntilConvergence_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter443 in this.success)
    {
      if (this.success.hasOwnProperty(iter443))
      {
        iter443 = this.success[iter443];
        output.writeI32(iter443);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 1);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_rankModels_args = function(args) {
  this.modelIds = null;
  this.metric = null;
  if (args) {
    if (args.modelIds !== undefined && args.modelIds !== null) {
      this.modelIds = Thrift.copyList(args.modelIds, [null]);
    }
    if (args.metric !== undefined && args.metric !== null) {
      this.metric = args.metric;
    }
  }
};
ModelDBService_rankModels_args.prototype = {};
ModelDBService_rankModels_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size444 = 0;
        var _rtmp3448;
        this.modelIds = [];
        var _etype447 = 0;
        _rtmp3448 = input.readListBegin();
        _etype447 = _rtmp3448.etype;
        _size444 = _rtmp3448.size;
        for (var _i449 = 0; _i449 < _size444; ++_i449)
        {
          var elem450 = null;
          elem450 = input.readI32();
          this.modelIds.push(elem450);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.metric = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_rankModels_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_rankModels_args');
  if (this.modelIds !== null && this.modelIds !== undefined) {
    output.writeFieldBegin('modelIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.modelIds.length);
    for (var iter451 in this.modelIds)
    {
      if (this.modelIds.hasOwnProperty(iter451))
      {
        iter451 = this.modelIds[iter451];
        output.writeI32(iter451);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.metric !== null && this.metric !== undefined) {
    output.writeFieldBegin('metric', Thrift.Type.I32, 2);
    output.writeI32(this.metric);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_rankModels_result = function(args) {
  this.success = null;
  this.svEx = null;
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_rankModels_result.prototype = {};
ModelDBService_rankModels_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size452 = 0;
        var _rtmp3456;
        this.success = [];
        var _etype455 = 0;
        _rtmp3456 = input.readListBegin();
        _etype455 = _rtmp3456.etype;
        _size452 = _rtmp3456.size;
        for (var _i457 = 0; _i457 < _size452; ++_i457)
        {
          var elem458 = null;
          elem458 = input.readI32();
          this.success.push(elem458);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_rankModels_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_rankModels_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter459 in this.success)
    {
      if (this.success.hasOwnProperty(iter459))
      {
        iter459 = this.success[iter459];
        output.writeI32(iter459);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 1);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_confidenceIntervals_args = function(args) {
  this.modelId = null;
  this.sigLevel = null;
  if (args) {
    if (args.modelId !== undefined && args.modelId !== null) {
      this.modelId = args.modelId;
    }
    if (args.sigLevel !== undefined && args.sigLevel !== null) {
      this.sigLevel = args.sigLevel;
    }
  }
};
ModelDBService_confidenceIntervals_args.prototype = {};
ModelDBService_confidenceIntervals_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.modelId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.sigLevel = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_confidenceIntervals_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_confidenceIntervals_args');
  if (this.modelId !== null && this.modelId !== undefined) {
    output.writeFieldBegin('modelId', Thrift.Type.I32, 1);
    output.writeI32(this.modelId);
    output.writeFieldEnd();
  }
  if (this.sigLevel !== null && this.sigLevel !== undefined) {
    output.writeFieldBegin('sigLevel', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.sigLevel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_confidenceIntervals_result = function(args) {
  this.success = null;
  this.rnfEx = null;
  this.ioEx = null;
  this.brEx = null;
  this.svEx = null;
  if (args instanceof ttypes.ResourceNotFoundException) {
    this.rnfEx = args;
    return;
  }
  if (args instanceof ttypes.IllegalOperationException) {
    this.ioEx = args;
    return;
  }
  if (args instanceof ttypes.BadRequestException) {
    this.brEx = args;
    return;
  }
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ConfidenceInterval]);
    }
    if (args.rnfEx !== undefined && args.rnfEx !== null) {
      this.rnfEx = args.rnfEx;
    }
    if (args.ioEx !== undefined && args.ioEx !== null) {
      this.ioEx = args.ioEx;
    }
    if (args.brEx !== undefined && args.brEx !== null) {
      this.brEx = args.brEx;
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_confidenceIntervals_result.prototype = {};
ModelDBService_confidenceIntervals_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size460 = 0;
        var _rtmp3464;
        this.success = [];
        var _etype463 = 0;
        _rtmp3464 = input.readListBegin();
        _etype463 = _rtmp3464.etype;
        _size460 = _rtmp3464.size;
        for (var _i465 = 0; _i465 < _size460; ++_i465)
        {
          var elem466 = null;
          elem466 = new ttypes.ConfidenceInterval();
          elem466.read(input);
          this.success.push(elem466);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rnfEx = new ttypes.ResourceNotFoundException();
        this.rnfEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.ioEx = new ttypes.IllegalOperationException();
        this.ioEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.brEx = new ttypes.BadRequestException();
        this.brEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_confidenceIntervals_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_confidenceIntervals_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter467 in this.success)
    {
      if (this.success.hasOwnProperty(iter467))
      {
        iter467 = this.success[iter467];
        iter467.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rnfEx !== null && this.rnfEx !== undefined) {
    output.writeFieldBegin('rnfEx', Thrift.Type.STRUCT, 1);
    this.rnfEx.write(output);
    output.writeFieldEnd();
  }
  if (this.ioEx !== null && this.ioEx !== undefined) {
    output.writeFieldBegin('ioEx', Thrift.Type.STRUCT, 2);
    this.ioEx.write(output);
    output.writeFieldEnd();
  }
  if (this.brEx !== null && this.brEx !== undefined) {
    output.writeFieldBegin('brEx', Thrift.Type.STRUCT, 3);
    this.brEx.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 4);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_modelsWithFeatures_args = function(args) {
  this.featureNames = null;
  if (args) {
    if (args.featureNames !== undefined && args.featureNames !== null) {
      this.featureNames = Thrift.copyList(args.featureNames, [null]);
    }
  }
};
ModelDBService_modelsWithFeatures_args.prototype = {};
ModelDBService_modelsWithFeatures_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size468 = 0;
        var _rtmp3472;
        this.featureNames = [];
        var _etype471 = 0;
        _rtmp3472 = input.readListBegin();
        _etype471 = _rtmp3472.etype;
        _size468 = _rtmp3472.size;
        for (var _i473 = 0; _i473 < _size468; ++_i473)
        {
          var elem474 = null;
          elem474 = input.readString();
          this.featureNames.push(elem474);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_modelsWithFeatures_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_modelsWithFeatures_args');
  if (this.featureNames !== null && this.featureNames !== undefined) {
    output.writeFieldBegin('featureNames', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.featureNames.length);
    for (var iter475 in this.featureNames)
    {
      if (this.featureNames.hasOwnProperty(iter475))
      {
        iter475 = this.featureNames[iter475];
        output.writeString(iter475);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_modelsWithFeatures_result = function(args) {
  this.success = null;
  this.svEx = null;
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_modelsWithFeatures_result.prototype = {};
ModelDBService_modelsWithFeatures_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size476 = 0;
        var _rtmp3480;
        this.success = [];
        var _etype479 = 0;
        _rtmp3480 = input.readListBegin();
        _etype479 = _rtmp3480.etype;
        _size476 = _rtmp3480.size;
        for (var _i481 = 0; _i481 < _size476; ++_i481)
        {
          var elem482 = null;
          elem482 = input.readI32();
          this.success.push(elem482);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_modelsWithFeatures_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_modelsWithFeatures_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter483 in this.success)
    {
      if (this.success.hasOwnProperty(iter483))
      {
        iter483 = this.success[iter483];
        output.writeI32(iter483);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 1);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_modelsDerivedFromDataFrame_args = function(args) {
  this.dfId = null;
  if (args) {
    if (args.dfId !== undefined && args.dfId !== null) {
      this.dfId = args.dfId;
    }
  }
};
ModelDBService_modelsDerivedFromDataFrame_args.prototype = {};
ModelDBService_modelsDerivedFromDataFrame_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.dfId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_modelsDerivedFromDataFrame_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_modelsDerivedFromDataFrame_args');
  if (this.dfId !== null && this.dfId !== undefined) {
    output.writeFieldBegin('dfId', Thrift.Type.I32, 1);
    output.writeI32(this.dfId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_modelsDerivedFromDataFrame_result = function(args) {
  this.success = null;
  this.rnfEx = null;
  this.svEx = null;
  if (args instanceof ttypes.ResourceNotFoundException) {
    this.rnfEx = args;
    return;
  }
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.rnfEx !== undefined && args.rnfEx !== null) {
      this.rnfEx = args.rnfEx;
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_modelsDerivedFromDataFrame_result.prototype = {};
ModelDBService_modelsDerivedFromDataFrame_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size484 = 0;
        var _rtmp3488;
        this.success = [];
        var _etype487 = 0;
        _rtmp3488 = input.readListBegin();
        _etype487 = _rtmp3488.etype;
        _size484 = _rtmp3488.size;
        for (var _i489 = 0; _i489 < _size484; ++_i489)
        {
          var elem490 = null;
          elem490 = input.readI32();
          this.success.push(elem490);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rnfEx = new ttypes.ResourceNotFoundException();
        this.rnfEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_modelsDerivedFromDataFrame_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_modelsDerivedFromDataFrame_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter491 in this.success)
    {
      if (this.success.hasOwnProperty(iter491))
      {
        iter491 = this.success[iter491];
        output.writeI32(iter491);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rnfEx !== null && this.rnfEx !== undefined) {
    output.writeFieldBegin('rnfEx', Thrift.Type.STRUCT, 1);
    this.rnfEx.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 2);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getModel_args = function(args) {
  this.modelId = null;
  if (args) {
    if (args.modelId !== undefined && args.modelId !== null) {
      this.modelId = args.modelId;
    }
  }
};
ModelDBService_getModel_args.prototype = {};
ModelDBService_getModel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.modelId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getModel_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getModel_args');
  if (this.modelId !== null && this.modelId !== undefined) {
    output.writeFieldBegin('modelId', Thrift.Type.I32, 1);
    output.writeI32(this.modelId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getModel_result = function(args) {
  this.success = null;
  this.rnfEx = null;
  this.svEx = null;
  if (args instanceof ttypes.ResourceNotFoundException) {
    this.rnfEx = args;
    return;
  }
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ModelResponse(args.success);
    }
    if (args.rnfEx !== undefined && args.rnfEx !== null) {
      this.rnfEx = args.rnfEx;
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_getModel_result.prototype = {};
ModelDBService_getModel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ModelResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.rnfEx = new ttypes.ResourceNotFoundException();
        this.rnfEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getModel_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getModel_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.rnfEx !== null && this.rnfEx !== undefined) {
    output.writeFieldBegin('rnfEx', Thrift.Type.STRUCT, 1);
    this.rnfEx.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 2);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getRunsInExperiment_args = function(args) {
  this.experimentId = null;
  if (args) {
    if (args.experimentId !== undefined && args.experimentId !== null) {
      this.experimentId = args.experimentId;
    }
  }
};
ModelDBService_getRunsInExperiment_args.prototype = {};
ModelDBService_getRunsInExperiment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.experimentId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getRunsInExperiment_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getRunsInExperiment_args');
  if (this.experimentId !== null && this.experimentId !== undefined) {
    output.writeFieldBegin('experimentId', Thrift.Type.I32, 1);
    output.writeI32(this.experimentId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getRunsInExperiment_result = function(args) {
  this.success = null;
  this.svEx = null;
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ExperimentRun]);
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_getRunsInExperiment_result.prototype = {};
ModelDBService_getRunsInExperiment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size492 = 0;
        var _rtmp3496;
        this.success = [];
        var _etype495 = 0;
        _rtmp3496 = input.readListBegin();
        _etype495 = _rtmp3496.etype;
        _size492 = _rtmp3496.size;
        for (var _i497 = 0; _i497 < _size492; ++_i497)
        {
          var elem498 = null;
          elem498 = new ttypes.ExperimentRun();
          elem498.read(input);
          this.success.push(elem498);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getRunsInExperiment_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getRunsInExperiment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter499 in this.success)
    {
      if (this.success.hasOwnProperty(iter499))
      {
        iter499 = this.success[iter499];
        iter499.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 1);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getRunsAndExperimentsInProject_args = function(args) {
  this.projId = null;
  if (args) {
    if (args.projId !== undefined && args.projId !== null) {
      this.projId = args.projId;
    }
  }
};
ModelDBService_getRunsAndExperimentsInProject_args.prototype = {};
ModelDBService_getRunsAndExperimentsInProject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.projId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getRunsAndExperimentsInProject_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getRunsAndExperimentsInProject_args');
  if (this.projId !== null && this.projId !== undefined) {
    output.writeFieldBegin('projId', Thrift.Type.I32, 1);
    output.writeI32(this.projId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getRunsAndExperimentsInProject_result = function(args) {
  this.success = null;
  this.svEx = null;
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ProjectExperimentsAndRuns(args.success);
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_getRunsAndExperimentsInProject_result.prototype = {};
ModelDBService_getRunsAndExperimentsInProject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ProjectExperimentsAndRuns();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getRunsAndExperimentsInProject_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getRunsAndExperimentsInProject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 1);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getProjectOverviews_args = function(args) {
};
ModelDBService_getProjectOverviews_args.prototype = {};
ModelDBService_getProjectOverviews_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getProjectOverviews_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getProjectOverviews_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getProjectOverviews_result = function(args) {
  this.success = null;
  this.svEx = null;
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ProjectOverviewResponse]);
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
  }
};
ModelDBService_getProjectOverviews_result.prototype = {};
ModelDBService_getProjectOverviews_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size500 = 0;
        var _rtmp3504;
        this.success = [];
        var _etype503 = 0;
        _rtmp3504 = input.readListBegin();
        _etype503 = _rtmp3504.etype;
        _size500 = _rtmp3504.size;
        for (var _i505 = 0; _i505 < _size500; ++_i505)
        {
          var elem506 = null;
          elem506 = new ttypes.ProjectOverviewResponse();
          elem506.read(input);
          this.success.push(elem506);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getProjectOverviews_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getProjectOverviews_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter507 in this.success)
    {
      if (this.success.hasOwnProperty(iter507))
      {
        iter507 = this.success[iter507];
        iter507.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 1);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getExperimentRunDetails_args = function(args) {
  this.experimentRunId = null;
  if (args) {
    if (args.experimentRunId !== undefined && args.experimentRunId !== null) {
      this.experimentRunId = args.experimentRunId;
    }
  }
};
ModelDBService_getExperimentRunDetails_args.prototype = {};
ModelDBService_getExperimentRunDetails_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.experimentRunId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getExperimentRunDetails_args.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getExperimentRunDetails_args');
  if (this.experimentRunId !== null && this.experimentRunId !== undefined) {
    output.writeFieldBegin('experimentRunId', Thrift.Type.I32, 1);
    output.writeI32(this.experimentRunId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBService_getExperimentRunDetails_result = function(args) {
  this.success = null;
  this.svEx = null;
  this.rnfEx = null;
  if (args instanceof ttypes.ServerLogicException) {
    this.svEx = args;
    return;
  }
  if (args instanceof ttypes.ResourceNotFoundException) {
    this.rnfEx = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ExperimentRunDetailsResponse(args.success);
    }
    if (args.svEx !== undefined && args.svEx !== null) {
      this.svEx = args.svEx;
    }
    if (args.rnfEx !== undefined && args.rnfEx !== null) {
      this.rnfEx = args.rnfEx;
    }
  }
};
ModelDBService_getExperimentRunDetails_result.prototype = {};
ModelDBService_getExperimentRunDetails_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExperimentRunDetailsResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.svEx = new ttypes.ServerLogicException();
        this.svEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.rnfEx = new ttypes.ResourceNotFoundException();
        this.rnfEx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelDBService_getExperimentRunDetails_result.prototype.write = function(output) {
  output.writeStructBegin('ModelDBService_getExperimentRunDetails_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.svEx !== null && this.svEx !== undefined) {
    output.writeFieldBegin('svEx', Thrift.Type.STRUCT, 1);
    this.svEx.write(output);
    output.writeFieldEnd();
  }
  if (this.rnfEx !== null && this.rnfEx !== undefined) {
    output.writeFieldBegin('rnfEx', Thrift.Type.STRUCT, 2);
    this.rnfEx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelDBServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ModelDBServiceClient.prototype = {};
ModelDBServiceClient.prototype.seqid = function() { return this._seqid; }
ModelDBServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
ModelDBServiceClient.prototype.testConnection = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_testConnection();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_testConnection();
  }
};

ModelDBServiceClient.prototype.send_testConnection = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('testConnection', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_testConnection_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_testConnection = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_testConnection_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('testConnection failed: unknown result');
};
ModelDBServiceClient.prototype.pathForTransformer = function(transformerId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_pathForTransformer(transformerId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_pathForTransformer(transformerId);
  }
};

ModelDBServiceClient.prototype.send_pathForTransformer = function(transformerId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('pathForTransformer', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_pathForTransformer_args();
  args.transformerId = transformerId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_pathForTransformer = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_pathForTransformer_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.rnfEx) {
    return callback(result.rnfEx);
  }
  if (null !== result.efEx) {
    return callback(result.efEx);
  }
  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('pathForTransformer failed: unknown result');
};
ModelDBServiceClient.prototype.storeFitEvent = function(fe, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_storeFitEvent(fe);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_storeFitEvent(fe);
  }
};

ModelDBServiceClient.prototype.send_storeFitEvent = function(fe) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('storeFitEvent', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_storeFitEvent_args();
  args.fe = fe;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_storeFitEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_storeFitEvent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ierEx) {
    return callback(result.ierEx);
  }
  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('storeFitEvent failed: unknown result');
};
ModelDBServiceClient.prototype.storeMetricEvent = function(me, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_storeMetricEvent(me);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_storeMetricEvent(me);
  }
};

ModelDBServiceClient.prototype.send_storeMetricEvent = function(me) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('storeMetricEvent', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_storeMetricEvent_args();
  args.me = me;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_storeMetricEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_storeMetricEvent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ierEx) {
    return callback(result.ierEx);
  }
  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('storeMetricEvent failed: unknown result');
};
ModelDBServiceClient.prototype.storeTransformEvent = function(te, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_storeTransformEvent(te);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_storeTransformEvent(te);
  }
};

ModelDBServiceClient.prototype.send_storeTransformEvent = function(te) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('storeTransformEvent', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_storeTransformEvent_args();
  args.te = te;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_storeTransformEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_storeTransformEvent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.ierEx) {
    return callback(result.ierEx);
  }
  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('storeTransformEvent failed: unknown result');
};
ModelDBServiceClient.prototype.storeRandomSplitEvent = function(rse, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_storeRandomSplitEvent(rse);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_storeRandomSplitEvent(rse);
  }
};

ModelDBServiceClient.prototype.send_storeRandomSplitEvent = function(rse) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('storeRandomSplitEvent', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_storeRandomSplitEvent_args();
  args.rse = rse;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_storeRandomSplitEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_storeRandomSplitEvent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('storeRandomSplitEvent failed: unknown result');
};
ModelDBServiceClient.prototype.storePipelineEvent = function(pipelineEvent, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_storePipelineEvent(pipelineEvent);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_storePipelineEvent(pipelineEvent);
  }
};

ModelDBServiceClient.prototype.send_storePipelineEvent = function(pipelineEvent) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('storePipelineEvent', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_storePipelineEvent_args();
  args.pipelineEvent = pipelineEvent;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_storePipelineEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_storePipelineEvent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('storePipelineEvent failed: unknown result');
};
ModelDBServiceClient.prototype.storeCrossValidationEvent = function(cve, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_storeCrossValidationEvent(cve);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_storeCrossValidationEvent(cve);
  }
};

ModelDBServiceClient.prototype.send_storeCrossValidationEvent = function(cve) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('storeCrossValidationEvent', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_storeCrossValidationEvent_args();
  args.cve = cve;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_storeCrossValidationEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_storeCrossValidationEvent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('storeCrossValidationEvent failed: unknown result');
};
ModelDBServiceClient.prototype.storeGridSearchCrossValidationEvent = function(gscve, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_storeGridSearchCrossValidationEvent(gscve);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_storeGridSearchCrossValidationEvent(gscve);
  }
};

ModelDBServiceClient.prototype.send_storeGridSearchCrossValidationEvent = function(gscve) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('storeGridSearchCrossValidationEvent', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_storeGridSearchCrossValidationEvent_args();
  args.gscve = gscve;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_storeGridSearchCrossValidationEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_storeGridSearchCrossValidationEvent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('storeGridSearchCrossValidationEvent failed: unknown result');
};
ModelDBServiceClient.prototype.storeAnnotationEvent = function(ae, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_storeAnnotationEvent(ae);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_storeAnnotationEvent(ae);
  }
};

ModelDBServiceClient.prototype.send_storeAnnotationEvent = function(ae) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('storeAnnotationEvent', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_storeAnnotationEvent_args();
  args.ae = ae;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_storeAnnotationEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_storeAnnotationEvent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('storeAnnotationEvent failed: unknown result');
};
ModelDBServiceClient.prototype.storeProjectEvent = function(pr, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_storeProjectEvent(pr);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_storeProjectEvent(pr);
  }
};

ModelDBServiceClient.prototype.send_storeProjectEvent = function(pr) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('storeProjectEvent', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_storeProjectEvent_args();
  args.pr = pr;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_storeProjectEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_storeProjectEvent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('storeProjectEvent failed: unknown result');
};
ModelDBServiceClient.prototype.storeExperimentEvent = function(er, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_storeExperimentEvent(er);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_storeExperimentEvent(er);
  }
};

ModelDBServiceClient.prototype.send_storeExperimentEvent = function(er) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('storeExperimentEvent', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_storeExperimentEvent_args();
  args.er = er;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_storeExperimentEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_storeExperimentEvent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('storeExperimentEvent failed: unknown result');
};
ModelDBServiceClient.prototype.storeExperimentRunEvent = function(er, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_storeExperimentRunEvent(er);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_storeExperimentRunEvent(er);
  }
};

ModelDBServiceClient.prototype.send_storeExperimentRunEvent = function(er) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('storeExperimentRunEvent', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_storeExperimentRunEvent_args();
  args.er = er;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_storeExperimentRunEvent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_storeExperimentRunEvent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('storeExperimentRunEvent failed: unknown result');
};
ModelDBServiceClient.prototype.storeLinearModel = function(modelId, model, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_storeLinearModel(modelId, model);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_storeLinearModel(modelId, model);
  }
};

ModelDBServiceClient.prototype.send_storeLinearModel = function(modelId, model) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('storeLinearModel', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_storeLinearModel_args();
  args.modelId = modelId;
  args.model = model;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_storeLinearModel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_storeLinearModel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.rnfEx) {
    return callback(result.rnfEx);
  }
  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('storeLinearModel failed: unknown result');
};
ModelDBServiceClient.prototype.getDataFrameAncestry = function(dataFrameId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDataFrameAncestry(dataFrameId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDataFrameAncestry(dataFrameId);
  }
};

ModelDBServiceClient.prototype.send_getDataFrameAncestry = function(dataFrameId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDataFrameAncestry', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_getDataFrameAncestry_args();
  args.dataFrameId = dataFrameId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_getDataFrameAncestry = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_getDataFrameAncestry_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.rnfEx) {
    return callback(result.rnfEx);
  }
  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDataFrameAncestry failed: unknown result');
};
ModelDBServiceClient.prototype.getCommonAncestor = function(dfId1, dfId2, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCommonAncestor(dfId1, dfId2);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCommonAncestor(dfId1, dfId2);
  }
};

ModelDBServiceClient.prototype.send_getCommonAncestor = function(dfId1, dfId2) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCommonAncestor', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_getCommonAncestor_args();
  args.dfId1 = dfId1;
  args.dfId2 = dfId2;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_getCommonAncestor = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_getCommonAncestor_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.rnfEx) {
    return callback(result.rnfEx);
  }
  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCommonAncestor failed: unknown result');
};
ModelDBServiceClient.prototype.getCommonAncestorForModels = function(modelId1, modelId2, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCommonAncestorForModels(modelId1, modelId2);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCommonAncestorForModels(modelId1, modelId2);
  }
};

ModelDBServiceClient.prototype.send_getCommonAncestorForModels = function(modelId1, modelId2) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCommonAncestorForModels', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_getCommonAncestorForModels_args();
  args.modelId1 = modelId1;
  args.modelId2 = modelId2;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_getCommonAncestorForModels = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_getCommonAncestorForModels_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.rnfEx) {
    return callback(result.rnfEx);
  }
  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCommonAncestorForModels failed: unknown result');
};
ModelDBServiceClient.prototype.getTrainingRowsCount = function(modelId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTrainingRowsCount(modelId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTrainingRowsCount(modelId);
  }
};

ModelDBServiceClient.prototype.send_getTrainingRowsCount = function(modelId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTrainingRowsCount', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_getTrainingRowsCount_args();
  args.modelId = modelId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_getTrainingRowsCount = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_getTrainingRowsCount_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.rnfEx) {
    return callback(result.rnfEx);
  }
  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTrainingRowsCount failed: unknown result');
};
ModelDBServiceClient.prototype.getTrainingRowsCounts = function(modelIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTrainingRowsCounts(modelIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTrainingRowsCounts(modelIds);
  }
};

ModelDBServiceClient.prototype.send_getTrainingRowsCounts = function(modelIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTrainingRowsCounts', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_getTrainingRowsCounts_args();
  args.modelIds = modelIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_getTrainingRowsCounts = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_getTrainingRowsCounts_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTrainingRowsCounts failed: unknown result');
};
ModelDBServiceClient.prototype.compareHyperparameters = function(modelId1, modelId2, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_compareHyperparameters(modelId1, modelId2);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_compareHyperparameters(modelId1, modelId2);
  }
};

ModelDBServiceClient.prototype.send_compareHyperparameters = function(modelId1, modelId2) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('compareHyperparameters', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_compareHyperparameters_args();
  args.modelId1 = modelId1;
  args.modelId2 = modelId2;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_compareHyperparameters = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_compareHyperparameters_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.rnfEx) {
    return callback(result.rnfEx);
  }
  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('compareHyperparameters failed: unknown result');
};
ModelDBServiceClient.prototype.compareFeatures = function(modelId1, modelId2, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_compareFeatures(modelId1, modelId2);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_compareFeatures(modelId1, modelId2);
  }
};

ModelDBServiceClient.prototype.send_compareFeatures = function(modelId1, modelId2) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('compareFeatures', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_compareFeatures_args();
  args.modelId1 = modelId1;
  args.modelId2 = modelId2;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_compareFeatures = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_compareFeatures_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.rnfEx) {
    return callback(result.rnfEx);
  }
  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('compareFeatures failed: unknown result');
};
ModelDBServiceClient.prototype.groupByProblemType = function(modelIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_groupByProblemType(modelIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_groupByProblemType(modelIds);
  }
};

ModelDBServiceClient.prototype.send_groupByProblemType = function(modelIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('groupByProblemType', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_groupByProblemType_args();
  args.modelIds = modelIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_groupByProblemType = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_groupByProblemType_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('groupByProblemType failed: unknown result');
};
ModelDBServiceClient.prototype.similarModels = function(modelId, compMetrics, numModels, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_similarModels(modelId, compMetrics, numModels);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_similarModels(modelId, compMetrics, numModels);
  }
};

ModelDBServiceClient.prototype.send_similarModels = function(modelId, compMetrics, numModels) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('similarModels', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_similarModels_args();
  args.modelId = modelId;
  args.compMetrics = compMetrics;
  args.numModels = numModels;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_similarModels = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_similarModels_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.rnfEx) {
    return callback(result.rnfEx);
  }
  if (null !== result.brEx) {
    return callback(result.brEx);
  }
  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('similarModels failed: unknown result');
};
ModelDBServiceClient.prototype.linearModelFeatureImportances = function(modelId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_linearModelFeatureImportances(modelId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_linearModelFeatureImportances(modelId);
  }
};

ModelDBServiceClient.prototype.send_linearModelFeatureImportances = function(modelId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('linearModelFeatureImportances', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_linearModelFeatureImportances_args();
  args.modelId = modelId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_linearModelFeatureImportances = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_linearModelFeatureImportances_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.rnfEx) {
    return callback(result.rnfEx);
  }
  if (null !== result.ioEx) {
    return callback(result.ioEx);
  }
  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('linearModelFeatureImportances failed: unknown result');
};
ModelDBServiceClient.prototype.compareLinearModelFeatureImportances = function(model1Id, model2Id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_compareLinearModelFeatureImportances(model1Id, model2Id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_compareLinearModelFeatureImportances(model1Id, model2Id);
  }
};

ModelDBServiceClient.prototype.send_compareLinearModelFeatureImportances = function(model1Id, model2Id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('compareLinearModelFeatureImportances', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_compareLinearModelFeatureImportances_args();
  args.model1Id = model1Id;
  args.model2Id = model2Id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_compareLinearModelFeatureImportances = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_compareLinearModelFeatureImportances_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.rnfEx) {
    return callback(result.rnfEx);
  }
  if (null !== result.ioEx) {
    return callback(result.ioEx);
  }
  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('compareLinearModelFeatureImportances failed: unknown result');
};
ModelDBServiceClient.prototype.iterationsUntilConvergence = function(modelIds, tolerance, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_iterationsUntilConvergence(modelIds, tolerance);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_iterationsUntilConvergence(modelIds, tolerance);
  }
};

ModelDBServiceClient.prototype.send_iterationsUntilConvergence = function(modelIds, tolerance) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('iterationsUntilConvergence', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_iterationsUntilConvergence_args();
  args.modelIds = modelIds;
  args.tolerance = tolerance;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_iterationsUntilConvergence = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_iterationsUntilConvergence_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('iterationsUntilConvergence failed: unknown result');
};
ModelDBServiceClient.prototype.rankModels = function(modelIds, metric, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rankModels(modelIds, metric);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rankModels(modelIds, metric);
  }
};

ModelDBServiceClient.prototype.send_rankModels = function(modelIds, metric) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rankModels', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_rankModels_args();
  args.modelIds = modelIds;
  args.metric = metric;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_rankModels = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_rankModels_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('rankModels failed: unknown result');
};
ModelDBServiceClient.prototype.confidenceIntervals = function(modelId, sigLevel, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_confidenceIntervals(modelId, sigLevel);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_confidenceIntervals(modelId, sigLevel);
  }
};

ModelDBServiceClient.prototype.send_confidenceIntervals = function(modelId, sigLevel) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('confidenceIntervals', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_confidenceIntervals_args();
  args.modelId = modelId;
  args.sigLevel = sigLevel;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_confidenceIntervals = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_confidenceIntervals_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.rnfEx) {
    return callback(result.rnfEx);
  }
  if (null !== result.ioEx) {
    return callback(result.ioEx);
  }
  if (null !== result.brEx) {
    return callback(result.brEx);
  }
  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('confidenceIntervals failed: unknown result');
};
ModelDBServiceClient.prototype.modelsWithFeatures = function(featureNames, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_modelsWithFeatures(featureNames);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_modelsWithFeatures(featureNames);
  }
};

ModelDBServiceClient.prototype.send_modelsWithFeatures = function(featureNames) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('modelsWithFeatures', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_modelsWithFeatures_args();
  args.featureNames = featureNames;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_modelsWithFeatures = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_modelsWithFeatures_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('modelsWithFeatures failed: unknown result');
};
ModelDBServiceClient.prototype.modelsDerivedFromDataFrame = function(dfId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_modelsDerivedFromDataFrame(dfId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_modelsDerivedFromDataFrame(dfId);
  }
};

ModelDBServiceClient.prototype.send_modelsDerivedFromDataFrame = function(dfId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('modelsDerivedFromDataFrame', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_modelsDerivedFromDataFrame_args();
  args.dfId = dfId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_modelsDerivedFromDataFrame = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_modelsDerivedFromDataFrame_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.rnfEx) {
    return callback(result.rnfEx);
  }
  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('modelsDerivedFromDataFrame failed: unknown result');
};
ModelDBServiceClient.prototype.getModel = function(modelId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getModel(modelId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getModel(modelId);
  }
};

ModelDBServiceClient.prototype.send_getModel = function(modelId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getModel', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_getModel_args();
  args.modelId = modelId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_getModel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_getModel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.rnfEx) {
    return callback(result.rnfEx);
  }
  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getModel failed: unknown result');
};
ModelDBServiceClient.prototype.getRunsInExperiment = function(experimentId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRunsInExperiment(experimentId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRunsInExperiment(experimentId);
  }
};

ModelDBServiceClient.prototype.send_getRunsInExperiment = function(experimentId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRunsInExperiment', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_getRunsInExperiment_args();
  args.experimentId = experimentId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_getRunsInExperiment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_getRunsInExperiment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRunsInExperiment failed: unknown result');
};
ModelDBServiceClient.prototype.getRunsAndExperimentsInProject = function(projId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getRunsAndExperimentsInProject(projId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getRunsAndExperimentsInProject(projId);
  }
};

ModelDBServiceClient.prototype.send_getRunsAndExperimentsInProject = function(projId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getRunsAndExperimentsInProject', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_getRunsAndExperimentsInProject_args();
  args.projId = projId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_getRunsAndExperimentsInProject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_getRunsAndExperimentsInProject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getRunsAndExperimentsInProject failed: unknown result');
};
ModelDBServiceClient.prototype.getProjectOverviews = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getProjectOverviews();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getProjectOverviews();
  }
};

ModelDBServiceClient.prototype.send_getProjectOverviews = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getProjectOverviews', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_getProjectOverviews_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_getProjectOverviews = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_getProjectOverviews_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getProjectOverviews failed: unknown result');
};
ModelDBServiceClient.prototype.getExperimentRunDetails = function(experimentRunId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getExperimentRunDetails(experimentRunId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getExperimentRunDetails(experimentRunId);
  }
};

ModelDBServiceClient.prototype.send_getExperimentRunDetails = function(experimentRunId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getExperimentRunDetails', Thrift.MessageType.CALL, this.seqid());
  var args = new ModelDBService_getExperimentRunDetails_args();
  args.experimentRunId = experimentRunId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ModelDBServiceClient.prototype.recv_getExperimentRunDetails = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ModelDBService_getExperimentRunDetails_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.svEx) {
    return callback(result.svEx);
  }
  if (null !== result.rnfEx) {
    return callback(result.rnfEx);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getExperimentRunDetails failed: unknown result');
};
ModelDBServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ModelDBServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ModelDBServiceProcessor.prototype.process_testConnection = function(seqid, input, output) {
  var args = new ModelDBService_testConnection_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.testConnection.length === 0) {
    Q.fcall(this._handler.testConnection)
      .then(function(result) {
        var result = new ModelDBService_testConnection_result({success: result});
        output.writeMessageBegin("testConnection", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testConnection", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.testConnection(function (err, result) {
      if (err == null) {
        var result = new ModelDBService_testConnection_result((err != null ? err : {success: result}));
        output.writeMessageBegin("testConnection", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("testConnection", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_pathForTransformer = function(seqid, input, output) {
  var args = new ModelDBService_pathForTransformer_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.pathForTransformer.length === 1) {
    Q.fcall(this._handler.pathForTransformer, args.transformerId)
      .then(function(result) {
        var result = new ModelDBService_pathForTransformer_result({success: result});
        output.writeMessageBegin("pathForTransformer", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.InvalidFieldException || err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_pathForTransformer_result(err);
          output.writeMessageBegin("pathForTransformer", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("pathForTransformer", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.pathForTransformer(args.transformerId, function (err, result) {
      if (err == null || err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.InvalidFieldException || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_pathForTransformer_result((err != null ? err : {success: result}));
        output.writeMessageBegin("pathForTransformer", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("pathForTransformer", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_storeFitEvent = function(seqid, input, output) {
  var args = new ModelDBService_storeFitEvent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.storeFitEvent.length === 1) {
    Q.fcall(this._handler.storeFitEvent, args.fe)
      .then(function(result) {
        var result = new ModelDBService_storeFitEvent_result({success: result});
        output.writeMessageBegin("storeFitEvent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidExperimentRunException || err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_storeFitEvent_result(err);
          output.writeMessageBegin("storeFitEvent", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeFitEvent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.storeFitEvent(args.fe, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidExperimentRunException || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_storeFitEvent_result((err != null ? err : {success: result}));
        output.writeMessageBegin("storeFitEvent", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("storeFitEvent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_storeMetricEvent = function(seqid, input, output) {
  var args = new ModelDBService_storeMetricEvent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.storeMetricEvent.length === 1) {
    Q.fcall(this._handler.storeMetricEvent, args.me)
      .then(function(result) {
        var result = new ModelDBService_storeMetricEvent_result({success: result});
        output.writeMessageBegin("storeMetricEvent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidExperimentRunException || err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_storeMetricEvent_result(err);
          output.writeMessageBegin("storeMetricEvent", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeMetricEvent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.storeMetricEvent(args.me, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidExperimentRunException || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_storeMetricEvent_result((err != null ? err : {success: result}));
        output.writeMessageBegin("storeMetricEvent", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("storeMetricEvent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_storeTransformEvent = function(seqid, input, output) {
  var args = new ModelDBService_storeTransformEvent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.storeTransformEvent.length === 1) {
    Q.fcall(this._handler.storeTransformEvent, args.te)
      .then(function(result) {
        var result = new ModelDBService_storeTransformEvent_result({success: result});
        output.writeMessageBegin("storeTransformEvent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.InvalidExperimentRunException || err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_storeTransformEvent_result(err);
          output.writeMessageBegin("storeTransformEvent", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeTransformEvent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.storeTransformEvent(args.te, function (err, result) {
      if (err == null || err instanceof ttypes.InvalidExperimentRunException || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_storeTransformEvent_result((err != null ? err : {success: result}));
        output.writeMessageBegin("storeTransformEvent", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("storeTransformEvent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_storeRandomSplitEvent = function(seqid, input, output) {
  var args = new ModelDBService_storeRandomSplitEvent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.storeRandomSplitEvent.length === 1) {
    Q.fcall(this._handler.storeRandomSplitEvent, args.rse)
      .then(function(result) {
        var result = new ModelDBService_storeRandomSplitEvent_result({success: result});
        output.writeMessageBegin("storeRandomSplitEvent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_storeRandomSplitEvent_result(err);
          output.writeMessageBegin("storeRandomSplitEvent", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeRandomSplitEvent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.storeRandomSplitEvent(args.rse, function (err, result) {
      if (err == null || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_storeRandomSplitEvent_result((err != null ? err : {success: result}));
        output.writeMessageBegin("storeRandomSplitEvent", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("storeRandomSplitEvent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_storePipelineEvent = function(seqid, input, output) {
  var args = new ModelDBService_storePipelineEvent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.storePipelineEvent.length === 1) {
    Q.fcall(this._handler.storePipelineEvent, args.pipelineEvent)
      .then(function(result) {
        var result = new ModelDBService_storePipelineEvent_result({success: result});
        output.writeMessageBegin("storePipelineEvent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_storePipelineEvent_result(err);
          output.writeMessageBegin("storePipelineEvent", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storePipelineEvent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.storePipelineEvent(args.pipelineEvent, function (err, result) {
      if (err == null || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_storePipelineEvent_result((err != null ? err : {success: result}));
        output.writeMessageBegin("storePipelineEvent", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("storePipelineEvent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_storeCrossValidationEvent = function(seqid, input, output) {
  var args = new ModelDBService_storeCrossValidationEvent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.storeCrossValidationEvent.length === 1) {
    Q.fcall(this._handler.storeCrossValidationEvent, args.cve)
      .then(function(result) {
        var result = new ModelDBService_storeCrossValidationEvent_result({success: result});
        output.writeMessageBegin("storeCrossValidationEvent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_storeCrossValidationEvent_result(err);
          output.writeMessageBegin("storeCrossValidationEvent", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeCrossValidationEvent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.storeCrossValidationEvent(args.cve, function (err, result) {
      if (err == null || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_storeCrossValidationEvent_result((err != null ? err : {success: result}));
        output.writeMessageBegin("storeCrossValidationEvent", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("storeCrossValidationEvent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_storeGridSearchCrossValidationEvent = function(seqid, input, output) {
  var args = new ModelDBService_storeGridSearchCrossValidationEvent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.storeGridSearchCrossValidationEvent.length === 1) {
    Q.fcall(this._handler.storeGridSearchCrossValidationEvent, args.gscve)
      .then(function(result) {
        var result = new ModelDBService_storeGridSearchCrossValidationEvent_result({success: result});
        output.writeMessageBegin("storeGridSearchCrossValidationEvent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_storeGridSearchCrossValidationEvent_result(err);
          output.writeMessageBegin("storeGridSearchCrossValidationEvent", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeGridSearchCrossValidationEvent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.storeGridSearchCrossValidationEvent(args.gscve, function (err, result) {
      if (err == null || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_storeGridSearchCrossValidationEvent_result((err != null ? err : {success: result}));
        output.writeMessageBegin("storeGridSearchCrossValidationEvent", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("storeGridSearchCrossValidationEvent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_storeAnnotationEvent = function(seqid, input, output) {
  var args = new ModelDBService_storeAnnotationEvent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.storeAnnotationEvent.length === 1) {
    Q.fcall(this._handler.storeAnnotationEvent, args.ae)
      .then(function(result) {
        var result = new ModelDBService_storeAnnotationEvent_result({success: result});
        output.writeMessageBegin("storeAnnotationEvent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_storeAnnotationEvent_result(err);
          output.writeMessageBegin("storeAnnotationEvent", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeAnnotationEvent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.storeAnnotationEvent(args.ae, function (err, result) {
      if (err == null || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_storeAnnotationEvent_result((err != null ? err : {success: result}));
        output.writeMessageBegin("storeAnnotationEvent", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("storeAnnotationEvent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_storeProjectEvent = function(seqid, input, output) {
  var args = new ModelDBService_storeProjectEvent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.storeProjectEvent.length === 1) {
    Q.fcall(this._handler.storeProjectEvent, args.pr)
      .then(function(result) {
        var result = new ModelDBService_storeProjectEvent_result({success: result});
        output.writeMessageBegin("storeProjectEvent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_storeProjectEvent_result(err);
          output.writeMessageBegin("storeProjectEvent", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeProjectEvent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.storeProjectEvent(args.pr, function (err, result) {
      if (err == null || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_storeProjectEvent_result((err != null ? err : {success: result}));
        output.writeMessageBegin("storeProjectEvent", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("storeProjectEvent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_storeExperimentEvent = function(seqid, input, output) {
  var args = new ModelDBService_storeExperimentEvent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.storeExperimentEvent.length === 1) {
    Q.fcall(this._handler.storeExperimentEvent, args.er)
      .then(function(result) {
        var result = new ModelDBService_storeExperimentEvent_result({success: result});
        output.writeMessageBegin("storeExperimentEvent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_storeExperimentEvent_result(err);
          output.writeMessageBegin("storeExperimentEvent", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeExperimentEvent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.storeExperimentEvent(args.er, function (err, result) {
      if (err == null || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_storeExperimentEvent_result((err != null ? err : {success: result}));
        output.writeMessageBegin("storeExperimentEvent", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("storeExperimentEvent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_storeExperimentRunEvent = function(seqid, input, output) {
  var args = new ModelDBService_storeExperimentRunEvent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.storeExperimentRunEvent.length === 1) {
    Q.fcall(this._handler.storeExperimentRunEvent, args.er)
      .then(function(result) {
        var result = new ModelDBService_storeExperimentRunEvent_result({success: result});
        output.writeMessageBegin("storeExperimentRunEvent", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_storeExperimentRunEvent_result(err);
          output.writeMessageBegin("storeExperimentRunEvent", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeExperimentRunEvent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.storeExperimentRunEvent(args.er, function (err, result) {
      if (err == null || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_storeExperimentRunEvent_result((err != null ? err : {success: result}));
        output.writeMessageBegin("storeExperimentRunEvent", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("storeExperimentRunEvent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_storeLinearModel = function(seqid, input, output) {
  var args = new ModelDBService_storeLinearModel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.storeLinearModel.length === 2) {
    Q.fcall(this._handler.storeLinearModel, args.modelId, args.model)
      .then(function(result) {
        var result = new ModelDBService_storeLinearModel_result({success: result});
        output.writeMessageBegin("storeLinearModel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_storeLinearModel_result(err);
          output.writeMessageBegin("storeLinearModel", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("storeLinearModel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.storeLinearModel(args.modelId, args.model, function (err, result) {
      if (err == null || err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_storeLinearModel_result((err != null ? err : {success: result}));
        output.writeMessageBegin("storeLinearModel", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("storeLinearModel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_getDataFrameAncestry = function(seqid, input, output) {
  var args = new ModelDBService_getDataFrameAncestry_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDataFrameAncestry.length === 1) {
    Q.fcall(this._handler.getDataFrameAncestry, args.dataFrameId)
      .then(function(result) {
        var result = new ModelDBService_getDataFrameAncestry_result({success: result});
        output.writeMessageBegin("getDataFrameAncestry", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_getDataFrameAncestry_result(err);
          output.writeMessageBegin("getDataFrameAncestry", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDataFrameAncestry", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDataFrameAncestry(args.dataFrameId, function (err, result) {
      if (err == null || err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_getDataFrameAncestry_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getDataFrameAncestry", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDataFrameAncestry", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_getCommonAncestor = function(seqid, input, output) {
  var args = new ModelDBService_getCommonAncestor_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCommonAncestor.length === 2) {
    Q.fcall(this._handler.getCommonAncestor, args.dfId1, args.dfId2)
      .then(function(result) {
        var result = new ModelDBService_getCommonAncestor_result({success: result});
        output.writeMessageBegin("getCommonAncestor", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_getCommonAncestor_result(err);
          output.writeMessageBegin("getCommonAncestor", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCommonAncestor", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCommonAncestor(args.dfId1, args.dfId2, function (err, result) {
      if (err == null || err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_getCommonAncestor_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getCommonAncestor", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCommonAncestor", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_getCommonAncestorForModels = function(seqid, input, output) {
  var args = new ModelDBService_getCommonAncestorForModels_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCommonAncestorForModels.length === 2) {
    Q.fcall(this._handler.getCommonAncestorForModels, args.modelId1, args.modelId2)
      .then(function(result) {
        var result = new ModelDBService_getCommonAncestorForModels_result({success: result});
        output.writeMessageBegin("getCommonAncestorForModels", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_getCommonAncestorForModels_result(err);
          output.writeMessageBegin("getCommonAncestorForModels", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCommonAncestorForModels", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCommonAncestorForModels(args.modelId1, args.modelId2, function (err, result) {
      if (err == null || err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_getCommonAncestorForModels_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getCommonAncestorForModels", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCommonAncestorForModels", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_getTrainingRowsCount = function(seqid, input, output) {
  var args = new ModelDBService_getTrainingRowsCount_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTrainingRowsCount.length === 1) {
    Q.fcall(this._handler.getTrainingRowsCount, args.modelId)
      .then(function(result) {
        var result = new ModelDBService_getTrainingRowsCount_result({success: result});
        output.writeMessageBegin("getTrainingRowsCount", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_getTrainingRowsCount_result(err);
          output.writeMessageBegin("getTrainingRowsCount", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getTrainingRowsCount", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTrainingRowsCount(args.modelId, function (err, result) {
      if (err == null || err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_getTrainingRowsCount_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getTrainingRowsCount", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTrainingRowsCount", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_getTrainingRowsCounts = function(seqid, input, output) {
  var args = new ModelDBService_getTrainingRowsCounts_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTrainingRowsCounts.length === 1) {
    Q.fcall(this._handler.getTrainingRowsCounts, args.modelIds)
      .then(function(result) {
        var result = new ModelDBService_getTrainingRowsCounts_result({success: result});
        output.writeMessageBegin("getTrainingRowsCounts", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_getTrainingRowsCounts_result(err);
          output.writeMessageBegin("getTrainingRowsCounts", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getTrainingRowsCounts", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTrainingRowsCounts(args.modelIds, function (err, result) {
      if (err == null || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_getTrainingRowsCounts_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getTrainingRowsCounts", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTrainingRowsCounts", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_compareHyperparameters = function(seqid, input, output) {
  var args = new ModelDBService_compareHyperparameters_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.compareHyperparameters.length === 2) {
    Q.fcall(this._handler.compareHyperparameters, args.modelId1, args.modelId2)
      .then(function(result) {
        var result = new ModelDBService_compareHyperparameters_result({success: result});
        output.writeMessageBegin("compareHyperparameters", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_compareHyperparameters_result(err);
          output.writeMessageBegin("compareHyperparameters", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("compareHyperparameters", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.compareHyperparameters(args.modelId1, args.modelId2, function (err, result) {
      if (err == null || err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_compareHyperparameters_result((err != null ? err : {success: result}));
        output.writeMessageBegin("compareHyperparameters", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("compareHyperparameters", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_compareFeatures = function(seqid, input, output) {
  var args = new ModelDBService_compareFeatures_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.compareFeatures.length === 2) {
    Q.fcall(this._handler.compareFeatures, args.modelId1, args.modelId2)
      .then(function(result) {
        var result = new ModelDBService_compareFeatures_result({success: result});
        output.writeMessageBegin("compareFeatures", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_compareFeatures_result(err);
          output.writeMessageBegin("compareFeatures", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("compareFeatures", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.compareFeatures(args.modelId1, args.modelId2, function (err, result) {
      if (err == null || err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_compareFeatures_result((err != null ? err : {success: result}));
        output.writeMessageBegin("compareFeatures", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("compareFeatures", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_groupByProblemType = function(seqid, input, output) {
  var args = new ModelDBService_groupByProblemType_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.groupByProblemType.length === 1) {
    Q.fcall(this._handler.groupByProblemType, args.modelIds)
      .then(function(result) {
        var result = new ModelDBService_groupByProblemType_result({success: result});
        output.writeMessageBegin("groupByProblemType", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_groupByProblemType_result(err);
          output.writeMessageBegin("groupByProblemType", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("groupByProblemType", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.groupByProblemType(args.modelIds, function (err, result) {
      if (err == null || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_groupByProblemType_result((err != null ? err : {success: result}));
        output.writeMessageBegin("groupByProblemType", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("groupByProblemType", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_similarModels = function(seqid, input, output) {
  var args = new ModelDBService_similarModels_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.similarModels.length === 3) {
    Q.fcall(this._handler.similarModels, args.modelId, args.compMetrics, args.numModels)
      .then(function(result) {
        var result = new ModelDBService_similarModels_result({success: result});
        output.writeMessageBegin("similarModels", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.BadRequestException || err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_similarModels_result(err);
          output.writeMessageBegin("similarModels", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("similarModels", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.similarModels(args.modelId, args.compMetrics, args.numModels, function (err, result) {
      if (err == null || err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.BadRequestException || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_similarModels_result((err != null ? err : {success: result}));
        output.writeMessageBegin("similarModels", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("similarModels", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_linearModelFeatureImportances = function(seqid, input, output) {
  var args = new ModelDBService_linearModelFeatureImportances_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.linearModelFeatureImportances.length === 1) {
    Q.fcall(this._handler.linearModelFeatureImportances, args.modelId)
      .then(function(result) {
        var result = new ModelDBService_linearModelFeatureImportances_result({success: result});
        output.writeMessageBegin("linearModelFeatureImportances", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.IllegalOperationException || err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_linearModelFeatureImportances_result(err);
          output.writeMessageBegin("linearModelFeatureImportances", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("linearModelFeatureImportances", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.linearModelFeatureImportances(args.modelId, function (err, result) {
      if (err == null || err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.IllegalOperationException || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_linearModelFeatureImportances_result((err != null ? err : {success: result}));
        output.writeMessageBegin("linearModelFeatureImportances", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("linearModelFeatureImportances", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_compareLinearModelFeatureImportances = function(seqid, input, output) {
  var args = new ModelDBService_compareLinearModelFeatureImportances_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.compareLinearModelFeatureImportances.length === 2) {
    Q.fcall(this._handler.compareLinearModelFeatureImportances, args.model1Id, args.model2Id)
      .then(function(result) {
        var result = new ModelDBService_compareLinearModelFeatureImportances_result({success: result});
        output.writeMessageBegin("compareLinearModelFeatureImportances", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.IllegalOperationException || err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_compareLinearModelFeatureImportances_result(err);
          output.writeMessageBegin("compareLinearModelFeatureImportances", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("compareLinearModelFeatureImportances", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.compareLinearModelFeatureImportances(args.model1Id, args.model2Id, function (err, result) {
      if (err == null || err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.IllegalOperationException || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_compareLinearModelFeatureImportances_result((err != null ? err : {success: result}));
        output.writeMessageBegin("compareLinearModelFeatureImportances", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("compareLinearModelFeatureImportances", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_iterationsUntilConvergence = function(seqid, input, output) {
  var args = new ModelDBService_iterationsUntilConvergence_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.iterationsUntilConvergence.length === 2) {
    Q.fcall(this._handler.iterationsUntilConvergence, args.modelIds, args.tolerance)
      .then(function(result) {
        var result = new ModelDBService_iterationsUntilConvergence_result({success: result});
        output.writeMessageBegin("iterationsUntilConvergence", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_iterationsUntilConvergence_result(err);
          output.writeMessageBegin("iterationsUntilConvergence", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("iterationsUntilConvergence", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.iterationsUntilConvergence(args.modelIds, args.tolerance, function (err, result) {
      if (err == null || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_iterationsUntilConvergence_result((err != null ? err : {success: result}));
        output.writeMessageBegin("iterationsUntilConvergence", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("iterationsUntilConvergence", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_rankModels = function(seqid, input, output) {
  var args = new ModelDBService_rankModels_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rankModels.length === 2) {
    Q.fcall(this._handler.rankModels, args.modelIds, args.metric)
      .then(function(result) {
        var result = new ModelDBService_rankModels_result({success: result});
        output.writeMessageBegin("rankModels", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_rankModels_result(err);
          output.writeMessageBegin("rankModels", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("rankModels", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rankModels(args.modelIds, args.metric, function (err, result) {
      if (err == null || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_rankModels_result((err != null ? err : {success: result}));
        output.writeMessageBegin("rankModels", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("rankModels", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_confidenceIntervals = function(seqid, input, output) {
  var args = new ModelDBService_confidenceIntervals_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.confidenceIntervals.length === 2) {
    Q.fcall(this._handler.confidenceIntervals, args.modelId, args.sigLevel)
      .then(function(result) {
        var result = new ModelDBService_confidenceIntervals_result({success: result});
        output.writeMessageBegin("confidenceIntervals", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.IllegalOperationException || err instanceof ttypes.BadRequestException || err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_confidenceIntervals_result(err);
          output.writeMessageBegin("confidenceIntervals", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("confidenceIntervals", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.confidenceIntervals(args.modelId, args.sigLevel, function (err, result) {
      if (err == null || err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.IllegalOperationException || err instanceof ttypes.BadRequestException || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_confidenceIntervals_result((err != null ? err : {success: result}));
        output.writeMessageBegin("confidenceIntervals", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("confidenceIntervals", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_modelsWithFeatures = function(seqid, input, output) {
  var args = new ModelDBService_modelsWithFeatures_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.modelsWithFeatures.length === 1) {
    Q.fcall(this._handler.modelsWithFeatures, args.featureNames)
      .then(function(result) {
        var result = new ModelDBService_modelsWithFeatures_result({success: result});
        output.writeMessageBegin("modelsWithFeatures", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_modelsWithFeatures_result(err);
          output.writeMessageBegin("modelsWithFeatures", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("modelsWithFeatures", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.modelsWithFeatures(args.featureNames, function (err, result) {
      if (err == null || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_modelsWithFeatures_result((err != null ? err : {success: result}));
        output.writeMessageBegin("modelsWithFeatures", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("modelsWithFeatures", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_modelsDerivedFromDataFrame = function(seqid, input, output) {
  var args = new ModelDBService_modelsDerivedFromDataFrame_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.modelsDerivedFromDataFrame.length === 1) {
    Q.fcall(this._handler.modelsDerivedFromDataFrame, args.dfId)
      .then(function(result) {
        var result = new ModelDBService_modelsDerivedFromDataFrame_result({success: result});
        output.writeMessageBegin("modelsDerivedFromDataFrame", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_modelsDerivedFromDataFrame_result(err);
          output.writeMessageBegin("modelsDerivedFromDataFrame", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("modelsDerivedFromDataFrame", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.modelsDerivedFromDataFrame(args.dfId, function (err, result) {
      if (err == null || err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_modelsDerivedFromDataFrame_result((err != null ? err : {success: result}));
        output.writeMessageBegin("modelsDerivedFromDataFrame", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("modelsDerivedFromDataFrame", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_getModel = function(seqid, input, output) {
  var args = new ModelDBService_getModel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getModel.length === 1) {
    Q.fcall(this._handler.getModel, args.modelId)
      .then(function(result) {
        var result = new ModelDBService_getModel_result({success: result});
        output.writeMessageBegin("getModel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_getModel_result(err);
          output.writeMessageBegin("getModel", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getModel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getModel(args.modelId, function (err, result) {
      if (err == null || err instanceof ttypes.ResourceNotFoundException || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_getModel_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getModel", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getModel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_getRunsInExperiment = function(seqid, input, output) {
  var args = new ModelDBService_getRunsInExperiment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRunsInExperiment.length === 1) {
    Q.fcall(this._handler.getRunsInExperiment, args.experimentId)
      .then(function(result) {
        var result = new ModelDBService_getRunsInExperiment_result({success: result});
        output.writeMessageBegin("getRunsInExperiment", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_getRunsInExperiment_result(err);
          output.writeMessageBegin("getRunsInExperiment", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRunsInExperiment", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRunsInExperiment(args.experimentId, function (err, result) {
      if (err == null || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_getRunsInExperiment_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getRunsInExperiment", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRunsInExperiment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_getRunsAndExperimentsInProject = function(seqid, input, output) {
  var args = new ModelDBService_getRunsAndExperimentsInProject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getRunsAndExperimentsInProject.length === 1) {
    Q.fcall(this._handler.getRunsAndExperimentsInProject, args.projId)
      .then(function(result) {
        var result = new ModelDBService_getRunsAndExperimentsInProject_result({success: result});
        output.writeMessageBegin("getRunsAndExperimentsInProject", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_getRunsAndExperimentsInProject_result(err);
          output.writeMessageBegin("getRunsAndExperimentsInProject", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getRunsAndExperimentsInProject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getRunsAndExperimentsInProject(args.projId, function (err, result) {
      if (err == null || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_getRunsAndExperimentsInProject_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getRunsAndExperimentsInProject", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getRunsAndExperimentsInProject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_getProjectOverviews = function(seqid, input, output) {
  var args = new ModelDBService_getProjectOverviews_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getProjectOverviews.length === 0) {
    Q.fcall(this._handler.getProjectOverviews)
      .then(function(result) {
        var result = new ModelDBService_getProjectOverviews_result({success: result});
        output.writeMessageBegin("getProjectOverviews", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServerLogicException) {
          var result = new ModelDBService_getProjectOverviews_result(err);
          output.writeMessageBegin("getProjectOverviews", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getProjectOverviews", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getProjectOverviews(function (err, result) {
      if (err == null || err instanceof ttypes.ServerLogicException) {
        var result = new ModelDBService_getProjectOverviews_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getProjectOverviews", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getProjectOverviews", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ModelDBServiceProcessor.prototype.process_getExperimentRunDetails = function(seqid, input, output) {
  var args = new ModelDBService_getExperimentRunDetails_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getExperimentRunDetails.length === 1) {
    Q.fcall(this._handler.getExperimentRunDetails, args.experimentRunId)
      .then(function(result) {
        var result = new ModelDBService_getExperimentRunDetails_result({success: result});
        output.writeMessageBegin("getExperimentRunDetails", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ServerLogicException || err instanceof ttypes.ResourceNotFoundException) {
          var result = new ModelDBService_getExperimentRunDetails_result(err);
          output.writeMessageBegin("getExperimentRunDetails", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getExperimentRunDetails", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getExperimentRunDetails(args.experimentRunId, function (err, result) {
      if (err == null || err instanceof ttypes.ServerLogicException || err instanceof ttypes.ResourceNotFoundException) {
        var result = new ModelDBService_getExperimentRunDetails_result((err != null ? err : {success: result}));
        output.writeMessageBegin("getExperimentRunDetails", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getExperimentRunDetails", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

